
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Jugador
 * 
 */
export type Jugador = $Result.DefaultSelection<Prisma.$JugadorPayload>
/**
 * Model Partida
 * 
 */
export type Partida = $Result.DefaultSelection<Prisma.$PartidaPayload>
/**
 * Model Movimiento
 * 
 */
export type Movimiento = $Result.DefaultSelection<Prisma.$MovimientoPayload>
/**
 * Model Jugador_backup
 * 
 */
export type Jugador_backup = $Result.DefaultSelection<Prisma.$Jugador_backupPayload>
/**
 * Model Partida_backup
 * 
 */
export type Partida_backup = $Result.DefaultSelection<Prisma.$Partida_backupPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Jugadors
 * const jugadors = await prisma.jugador.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Jugadors
   * const jugadors = await prisma.jugador.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.jugador`: Exposes CRUD operations for the **Jugador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jugadors
    * const jugadors = await prisma.jugador.findMany()
    * ```
    */
  get jugador(): Prisma.JugadorDelegate<ExtArgs>;

  /**
   * `prisma.partida`: Exposes CRUD operations for the **Partida** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partidas
    * const partidas = await prisma.partida.findMany()
    * ```
    */
  get partida(): Prisma.PartidaDelegate<ExtArgs>;

  /**
   * `prisma.movimiento`: Exposes CRUD operations for the **Movimiento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Movimientos
    * const movimientos = await prisma.movimiento.findMany()
    * ```
    */
  get movimiento(): Prisma.MovimientoDelegate<ExtArgs>;

  /**
   * `prisma.jugador_backup`: Exposes CRUD operations for the **Jugador_backup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jugador_backups
    * const jugador_backups = await prisma.jugador_backup.findMany()
    * ```
    */
  get jugador_backup(): Prisma.Jugador_backupDelegate<ExtArgs>;

  /**
   * `prisma.partida_backup`: Exposes CRUD operations for the **Partida_backup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partida_backups
    * const partida_backups = await prisma.partida_backup.findMany()
    * ```
    */
  get partida_backup(): Prisma.Partida_backupDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Jugador: 'Jugador',
    Partida: 'Partida',
    Movimiento: 'Movimiento',
    Jugador_backup: 'Jugador_backup',
    Partida_backup: 'Partida_backup'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "jugador" | "partida" | "movimiento" | "jugador_backup" | "partida_backup"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Jugador: {
        payload: Prisma.$JugadorPayload<ExtArgs>
        fields: Prisma.JugadorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JugadorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JugadorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>
          }
          findFirst: {
            args: Prisma.JugadorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JugadorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>
          }
          findMany: {
            args: Prisma.JugadorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>[]
          }
          create: {
            args: Prisma.JugadorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>
          }
          createMany: {
            args: Prisma.JugadorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.JugadorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>
          }
          update: {
            args: Prisma.JugadorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>
          }
          deleteMany: {
            args: Prisma.JugadorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JugadorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JugadorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JugadorPayload>
          }
          aggregate: {
            args: Prisma.JugadorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJugador>
          }
          groupBy: {
            args: Prisma.JugadorGroupByArgs<ExtArgs>
            result: $Utils.Optional<JugadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.JugadorCountArgs<ExtArgs>
            result: $Utils.Optional<JugadorCountAggregateOutputType> | number
          }
        }
      }
      Partida: {
        payload: Prisma.$PartidaPayload<ExtArgs>
        fields: Prisma.PartidaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartidaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartidaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>
          }
          findFirst: {
            args: Prisma.PartidaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartidaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>
          }
          findMany: {
            args: Prisma.PartidaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>[]
          }
          create: {
            args: Prisma.PartidaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>
          }
          createMany: {
            args: Prisma.PartidaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PartidaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>
          }
          update: {
            args: Prisma.PartidaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>
          }
          deleteMany: {
            args: Prisma.PartidaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartidaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PartidaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidaPayload>
          }
          aggregate: {
            args: Prisma.PartidaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartida>
          }
          groupBy: {
            args: Prisma.PartidaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartidaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartidaCountArgs<ExtArgs>
            result: $Utils.Optional<PartidaCountAggregateOutputType> | number
          }
        }
      }
      Movimiento: {
        payload: Prisma.$MovimientoPayload<ExtArgs>
        fields: Prisma.MovimientoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MovimientoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimientoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MovimientoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimientoPayload>
          }
          findFirst: {
            args: Prisma.MovimientoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimientoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MovimientoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimientoPayload>
          }
          findMany: {
            args: Prisma.MovimientoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimientoPayload>[]
          }
          create: {
            args: Prisma.MovimientoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimientoPayload>
          }
          createMany: {
            args: Prisma.MovimientoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MovimientoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimientoPayload>
          }
          update: {
            args: Prisma.MovimientoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimientoPayload>
          }
          deleteMany: {
            args: Prisma.MovimientoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MovimientoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MovimientoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovimientoPayload>
          }
          aggregate: {
            args: Prisma.MovimientoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMovimiento>
          }
          groupBy: {
            args: Prisma.MovimientoGroupByArgs<ExtArgs>
            result: $Utils.Optional<MovimientoGroupByOutputType>[]
          }
          count: {
            args: Prisma.MovimientoCountArgs<ExtArgs>
            result: $Utils.Optional<MovimientoCountAggregateOutputType> | number
          }
        }
      }
      Jugador_backup: {
        payload: Prisma.$Jugador_backupPayload<ExtArgs>
        fields: Prisma.Jugador_backupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Jugador_backupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Jugador_backupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Jugador_backupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Jugador_backupPayload>
          }
          findFirst: {
            args: Prisma.Jugador_backupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Jugador_backupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Jugador_backupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Jugador_backupPayload>
          }
          findMany: {
            args: Prisma.Jugador_backupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Jugador_backupPayload>[]
          }
          create: {
            args: Prisma.Jugador_backupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Jugador_backupPayload>
          }
          createMany: {
            args: Prisma.Jugador_backupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Jugador_backupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Jugador_backupPayload>
          }
          update: {
            args: Prisma.Jugador_backupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Jugador_backupPayload>
          }
          deleteMany: {
            args: Prisma.Jugador_backupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Jugador_backupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Jugador_backupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Jugador_backupPayload>
          }
          aggregate: {
            args: Prisma.Jugador_backupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJugador_backup>
          }
          groupBy: {
            args: Prisma.Jugador_backupGroupByArgs<ExtArgs>
            result: $Utils.Optional<Jugador_backupGroupByOutputType>[]
          }
          count: {
            args: Prisma.Jugador_backupCountArgs<ExtArgs>
            result: $Utils.Optional<Jugador_backupCountAggregateOutputType> | number
          }
        }
      }
      Partida_backup: {
        payload: Prisma.$Partida_backupPayload<ExtArgs>
        fields: Prisma.Partida_backupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Partida_backupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Partida_backupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Partida_backupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Partida_backupPayload>
          }
          findFirst: {
            args: Prisma.Partida_backupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Partida_backupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Partida_backupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Partida_backupPayload>
          }
          findMany: {
            args: Prisma.Partida_backupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Partida_backupPayload>[]
          }
          create: {
            args: Prisma.Partida_backupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Partida_backupPayload>
          }
          createMany: {
            args: Prisma.Partida_backupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Partida_backupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Partida_backupPayload>
          }
          update: {
            args: Prisma.Partida_backupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Partida_backupPayload>
          }
          deleteMany: {
            args: Prisma.Partida_backupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Partida_backupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Partida_backupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Partida_backupPayload>
          }
          aggregate: {
            args: Prisma.Partida_backupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartida_backup>
          }
          groupBy: {
            args: Prisma.Partida_backupGroupByArgs<ExtArgs>
            result: $Utils.Optional<Partida_backupGroupByOutputType>[]
          }
          count: {
            args: Prisma.Partida_backupCountArgs<ExtArgs>
            result: $Utils.Optional<Partida_backupCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type JugadorCountOutputType
   */

  export type JugadorCountOutputType = {
    movimientos: number
    partidasGanador: number
    partidasComoJugador1: number
    partidasComoJugador2: number
  }

  export type JugadorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movimientos?: boolean | JugadorCountOutputTypeCountMovimientosArgs
    partidasGanador?: boolean | JugadorCountOutputTypeCountPartidasGanadorArgs
    partidasComoJugador1?: boolean | JugadorCountOutputTypeCountPartidasComoJugador1Args
    partidasComoJugador2?: boolean | JugadorCountOutputTypeCountPartidasComoJugador2Args
  }

  // Custom InputTypes
  /**
   * JugadorCountOutputType without action
   */
  export type JugadorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JugadorCountOutputType
     */
    select?: JugadorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JugadorCountOutputType without action
   */
  export type JugadorCountOutputTypeCountMovimientosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovimientoWhereInput
  }

  /**
   * JugadorCountOutputType without action
   */
  export type JugadorCountOutputTypeCountPartidasGanadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartidaWhereInput
  }

  /**
   * JugadorCountOutputType without action
   */
  export type JugadorCountOutputTypeCountPartidasComoJugador1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartidaWhereInput
  }

  /**
   * JugadorCountOutputType without action
   */
  export type JugadorCountOutputTypeCountPartidasComoJugador2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartidaWhereInput
  }


  /**
   * Count Type PartidaCountOutputType
   */

  export type PartidaCountOutputType = {
    movimientos: number
  }

  export type PartidaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movimientos?: boolean | PartidaCountOutputTypeCountMovimientosArgs
  }

  // Custom InputTypes
  /**
   * PartidaCountOutputType without action
   */
  export type PartidaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartidaCountOutputType
     */
    select?: PartidaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PartidaCountOutputType without action
   */
  export type PartidaCountOutputTypeCountMovimientosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovimientoWhereInput
  }


  /**
   * Count Type Jugador_backupCountOutputType
   */

  export type Jugador_backupCountOutputType = {
    Partida_backup_Partida_backup_idJugador1ToJugador_backup: number
    Partida_backup_Partida_backup_idJugador2ToJugador_backup: number
  }

  export type Jugador_backupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: boolean | Jugador_backupCountOutputTypeCountPartida_backup_Partida_backup_idJugador1ToJugador_backupArgs
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: boolean | Jugador_backupCountOutputTypeCountPartida_backup_Partida_backup_idJugador2ToJugador_backupArgs
  }

  // Custom InputTypes
  /**
   * Jugador_backupCountOutputType without action
   */
  export type Jugador_backupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador_backupCountOutputType
     */
    select?: Jugador_backupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Jugador_backupCountOutputType without action
   */
  export type Jugador_backupCountOutputTypeCountPartida_backup_Partida_backup_idJugador1ToJugador_backupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Partida_backupWhereInput
  }

  /**
   * Jugador_backupCountOutputType without action
   */
  export type Jugador_backupCountOutputTypeCountPartida_backup_Partida_backup_idJugador2ToJugador_backupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Partida_backupWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Jugador
   */

  export type AggregateJugador = {
    _count: JugadorCountAggregateOutputType | null
    _avg: JugadorAvgAggregateOutputType | null
    _sum: JugadorSumAggregateOutputType | null
    _min: JugadorMinAggregateOutputType | null
    _max: JugadorMaxAggregateOutputType | null
  }

  export type JugadorAvgAggregateOutputType = {
    id: number | null
    identificacion: number | null
    partidasGanadas: number | null
    partidasPerdidas: number | null
    partidasEmpatadas: number | null
    marcador: number | null
  }

  export type JugadorSumAggregateOutputType = {
    id: number | null
    identificacion: bigint | null
    partidasGanadas: number | null
    partidasPerdidas: number | null
    partidasEmpatadas: number | null
    marcador: number | null
  }

  export type JugadorMinAggregateOutputType = {
    id: number | null
    identificacion: bigint | null
    nombre: string | null
    partidasGanadas: number | null
    partidasPerdidas: number | null
    partidasEmpatadas: number | null
    marcador: number | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
  }

  export type JugadorMaxAggregateOutputType = {
    id: number | null
    identificacion: bigint | null
    nombre: string | null
    partidasGanadas: number | null
    partidasPerdidas: number | null
    partidasEmpatadas: number | null
    marcador: number | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
  }

  export type JugadorCountAggregateOutputType = {
    id: number
    identificacion: number
    nombre: number
    partidasGanadas: number
    partidasPerdidas: number
    partidasEmpatadas: number
    marcador: number
    fechaCreacion: number
    fechaActualizacion: number
    _all: number
  }


  export type JugadorAvgAggregateInputType = {
    id?: true
    identificacion?: true
    partidasGanadas?: true
    partidasPerdidas?: true
    partidasEmpatadas?: true
    marcador?: true
  }

  export type JugadorSumAggregateInputType = {
    id?: true
    identificacion?: true
    partidasGanadas?: true
    partidasPerdidas?: true
    partidasEmpatadas?: true
    marcador?: true
  }

  export type JugadorMinAggregateInputType = {
    id?: true
    identificacion?: true
    nombre?: true
    partidasGanadas?: true
    partidasPerdidas?: true
    partidasEmpatadas?: true
    marcador?: true
    fechaCreacion?: true
    fechaActualizacion?: true
  }

  export type JugadorMaxAggregateInputType = {
    id?: true
    identificacion?: true
    nombre?: true
    partidasGanadas?: true
    partidasPerdidas?: true
    partidasEmpatadas?: true
    marcador?: true
    fechaCreacion?: true
    fechaActualizacion?: true
  }

  export type JugadorCountAggregateInputType = {
    id?: true
    identificacion?: true
    nombre?: true
    partidasGanadas?: true
    partidasPerdidas?: true
    partidasEmpatadas?: true
    marcador?: true
    fechaCreacion?: true
    fechaActualizacion?: true
    _all?: true
  }

  export type JugadorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jugador to aggregate.
     */
    where?: JugadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jugadors to fetch.
     */
    orderBy?: JugadorOrderByWithRelationInput | JugadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JugadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jugadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jugadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jugadors
    **/
    _count?: true | JugadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JugadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JugadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JugadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JugadorMaxAggregateInputType
  }

  export type GetJugadorAggregateType<T extends JugadorAggregateArgs> = {
        [P in keyof T & keyof AggregateJugador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJugador[P]>
      : GetScalarType<T[P], AggregateJugador[P]>
  }




  export type JugadorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JugadorWhereInput
    orderBy?: JugadorOrderByWithAggregationInput | JugadorOrderByWithAggregationInput[]
    by: JugadorScalarFieldEnum[] | JugadorScalarFieldEnum
    having?: JugadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JugadorCountAggregateInputType | true
    _avg?: JugadorAvgAggregateInputType
    _sum?: JugadorSumAggregateInputType
    _min?: JugadorMinAggregateInputType
    _max?: JugadorMaxAggregateInputType
  }

  export type JugadorGroupByOutputType = {
    id: number
    identificacion: bigint
    nombre: string
    partidasGanadas: number
    partidasPerdidas: number
    partidasEmpatadas: number
    marcador: number
    fechaCreacion: Date
    fechaActualizacion: Date
    _count: JugadorCountAggregateOutputType | null
    _avg: JugadorAvgAggregateOutputType | null
    _sum: JugadorSumAggregateOutputType | null
    _min: JugadorMinAggregateOutputType | null
    _max: JugadorMaxAggregateOutputType | null
  }

  type GetJugadorGroupByPayload<T extends JugadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JugadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JugadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JugadorGroupByOutputType[P]>
            : GetScalarType<T[P], JugadorGroupByOutputType[P]>
        }
      >
    >


  export type JugadorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identificacion?: boolean
    nombre?: boolean
    partidasGanadas?: boolean
    partidasPerdidas?: boolean
    partidasEmpatadas?: boolean
    marcador?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
    movimientos?: boolean | Jugador$movimientosArgs<ExtArgs>
    partidasGanador?: boolean | Jugador$partidasGanadorArgs<ExtArgs>
    partidasComoJugador1?: boolean | Jugador$partidasComoJugador1Args<ExtArgs>
    partidasComoJugador2?: boolean | Jugador$partidasComoJugador2Args<ExtArgs>
    _count?: boolean | JugadorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jugador"]>


  export type JugadorSelectScalar = {
    id?: boolean
    identificacion?: boolean
    nombre?: boolean
    partidasGanadas?: boolean
    partidasPerdidas?: boolean
    partidasEmpatadas?: boolean
    marcador?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
  }

  export type JugadorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movimientos?: boolean | Jugador$movimientosArgs<ExtArgs>
    partidasGanador?: boolean | Jugador$partidasGanadorArgs<ExtArgs>
    partidasComoJugador1?: boolean | Jugador$partidasComoJugador1Args<ExtArgs>
    partidasComoJugador2?: boolean | Jugador$partidasComoJugador2Args<ExtArgs>
    _count?: boolean | JugadorCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $JugadorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Jugador"
    objects: {
      movimientos: Prisma.$MovimientoPayload<ExtArgs>[]
      partidasGanador: Prisma.$PartidaPayload<ExtArgs>[]
      partidasComoJugador1: Prisma.$PartidaPayload<ExtArgs>[]
      partidasComoJugador2: Prisma.$PartidaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      identificacion: bigint
      nombre: string
      partidasGanadas: number
      partidasPerdidas: number
      partidasEmpatadas: number
      marcador: number
      fechaCreacion: Date
      fechaActualizacion: Date
    }, ExtArgs["result"]["jugador"]>
    composites: {}
  }

  type JugadorGetPayload<S extends boolean | null | undefined | JugadorDefaultArgs> = $Result.GetResult<Prisma.$JugadorPayload, S>

  type JugadorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JugadorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JugadorCountAggregateInputType | true
    }

  export interface JugadorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Jugador'], meta: { name: 'Jugador' } }
    /**
     * Find zero or one Jugador that matches the filter.
     * @param {JugadorFindUniqueArgs} args - Arguments to find a Jugador
     * @example
     * // Get one Jugador
     * const jugador = await prisma.jugador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JugadorFindUniqueArgs>(args: SelectSubset<T, JugadorFindUniqueArgs<ExtArgs>>): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Jugador that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JugadorFindUniqueOrThrowArgs} args - Arguments to find a Jugador
     * @example
     * // Get one Jugador
     * const jugador = await prisma.jugador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JugadorFindUniqueOrThrowArgs>(args: SelectSubset<T, JugadorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Jugador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorFindFirstArgs} args - Arguments to find a Jugador
     * @example
     * // Get one Jugador
     * const jugador = await prisma.jugador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JugadorFindFirstArgs>(args?: SelectSubset<T, JugadorFindFirstArgs<ExtArgs>>): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Jugador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorFindFirstOrThrowArgs} args - Arguments to find a Jugador
     * @example
     * // Get one Jugador
     * const jugador = await prisma.jugador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JugadorFindFirstOrThrowArgs>(args?: SelectSubset<T, JugadorFindFirstOrThrowArgs<ExtArgs>>): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Jugadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jugadors
     * const jugadors = await prisma.jugador.findMany()
     * 
     * // Get first 10 Jugadors
     * const jugadors = await prisma.jugador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jugadorWithIdOnly = await prisma.jugador.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JugadorFindManyArgs>(args?: SelectSubset<T, JugadorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Jugador.
     * @param {JugadorCreateArgs} args - Arguments to create a Jugador.
     * @example
     * // Create one Jugador
     * const Jugador = await prisma.jugador.create({
     *   data: {
     *     // ... data to create a Jugador
     *   }
     * })
     * 
     */
    create<T extends JugadorCreateArgs>(args: SelectSubset<T, JugadorCreateArgs<ExtArgs>>): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Jugadors.
     * @param {JugadorCreateManyArgs} args - Arguments to create many Jugadors.
     * @example
     * // Create many Jugadors
     * const jugador = await prisma.jugador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JugadorCreateManyArgs>(args?: SelectSubset<T, JugadorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Jugador.
     * @param {JugadorDeleteArgs} args - Arguments to delete one Jugador.
     * @example
     * // Delete one Jugador
     * const Jugador = await prisma.jugador.delete({
     *   where: {
     *     // ... filter to delete one Jugador
     *   }
     * })
     * 
     */
    delete<T extends JugadorDeleteArgs>(args: SelectSubset<T, JugadorDeleteArgs<ExtArgs>>): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Jugador.
     * @param {JugadorUpdateArgs} args - Arguments to update one Jugador.
     * @example
     * // Update one Jugador
     * const jugador = await prisma.jugador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JugadorUpdateArgs>(args: SelectSubset<T, JugadorUpdateArgs<ExtArgs>>): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Jugadors.
     * @param {JugadorDeleteManyArgs} args - Arguments to filter Jugadors to delete.
     * @example
     * // Delete a few Jugadors
     * const { count } = await prisma.jugador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JugadorDeleteManyArgs>(args?: SelectSubset<T, JugadorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jugadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jugadors
     * const jugador = await prisma.jugador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JugadorUpdateManyArgs>(args: SelectSubset<T, JugadorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jugador.
     * @param {JugadorUpsertArgs} args - Arguments to update or create a Jugador.
     * @example
     * // Update or create a Jugador
     * const jugador = await prisma.jugador.upsert({
     *   create: {
     *     // ... data to create a Jugador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jugador we want to update
     *   }
     * })
     */
    upsert<T extends JugadorUpsertArgs>(args: SelectSubset<T, JugadorUpsertArgs<ExtArgs>>): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Jugadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorCountArgs} args - Arguments to filter Jugadors to count.
     * @example
     * // Count the number of Jugadors
     * const count = await prisma.jugador.count({
     *   where: {
     *     // ... the filter for the Jugadors we want to count
     *   }
     * })
    **/
    count<T extends JugadorCountArgs>(
      args?: Subset<T, JugadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JugadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jugador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JugadorAggregateArgs>(args: Subset<T, JugadorAggregateArgs>): Prisma.PrismaPromise<GetJugadorAggregateType<T>>

    /**
     * Group by Jugador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JugadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JugadorGroupByArgs['orderBy'] }
        : { orderBy?: JugadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JugadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJugadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Jugador model
   */
  readonly fields: JugadorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Jugador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JugadorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    movimientos<T extends Jugador$movimientosArgs<ExtArgs> = {}>(args?: Subset<T, Jugador$movimientosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovimientoPayload<ExtArgs>, T, "findMany"> | Null>
    partidasGanador<T extends Jugador$partidasGanadorArgs<ExtArgs> = {}>(args?: Subset<T, Jugador$partidasGanadorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findMany"> | Null>
    partidasComoJugador1<T extends Jugador$partidasComoJugador1Args<ExtArgs> = {}>(args?: Subset<T, Jugador$partidasComoJugador1Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findMany"> | Null>
    partidasComoJugador2<T extends Jugador$partidasComoJugador2Args<ExtArgs> = {}>(args?: Subset<T, Jugador$partidasComoJugador2Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Jugador model
   */ 
  interface JugadorFieldRefs {
    readonly id: FieldRef<"Jugador", 'Int'>
    readonly identificacion: FieldRef<"Jugador", 'BigInt'>
    readonly nombre: FieldRef<"Jugador", 'String'>
    readonly partidasGanadas: FieldRef<"Jugador", 'Int'>
    readonly partidasPerdidas: FieldRef<"Jugador", 'Int'>
    readonly partidasEmpatadas: FieldRef<"Jugador", 'Int'>
    readonly marcador: FieldRef<"Jugador", 'Int'>
    readonly fechaCreacion: FieldRef<"Jugador", 'DateTime'>
    readonly fechaActualizacion: FieldRef<"Jugador", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Jugador findUnique
   */
  export type JugadorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * Filter, which Jugador to fetch.
     */
    where: JugadorWhereUniqueInput
  }

  /**
   * Jugador findUniqueOrThrow
   */
  export type JugadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * Filter, which Jugador to fetch.
     */
    where: JugadorWhereUniqueInput
  }

  /**
   * Jugador findFirst
   */
  export type JugadorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * Filter, which Jugador to fetch.
     */
    where?: JugadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jugadors to fetch.
     */
    orderBy?: JugadorOrderByWithRelationInput | JugadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jugadors.
     */
    cursor?: JugadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jugadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jugadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jugadors.
     */
    distinct?: JugadorScalarFieldEnum | JugadorScalarFieldEnum[]
  }

  /**
   * Jugador findFirstOrThrow
   */
  export type JugadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * Filter, which Jugador to fetch.
     */
    where?: JugadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jugadors to fetch.
     */
    orderBy?: JugadorOrderByWithRelationInput | JugadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jugadors.
     */
    cursor?: JugadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jugadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jugadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jugadors.
     */
    distinct?: JugadorScalarFieldEnum | JugadorScalarFieldEnum[]
  }

  /**
   * Jugador findMany
   */
  export type JugadorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * Filter, which Jugadors to fetch.
     */
    where?: JugadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jugadors to fetch.
     */
    orderBy?: JugadorOrderByWithRelationInput | JugadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jugadors.
     */
    cursor?: JugadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jugadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jugadors.
     */
    skip?: number
    distinct?: JugadorScalarFieldEnum | JugadorScalarFieldEnum[]
  }

  /**
   * Jugador create
   */
  export type JugadorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * The data needed to create a Jugador.
     */
    data: XOR<JugadorCreateInput, JugadorUncheckedCreateInput>
  }

  /**
   * Jugador createMany
   */
  export type JugadorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jugadors.
     */
    data: JugadorCreateManyInput | JugadorCreateManyInput[]
  }

  /**
   * Jugador update
   */
  export type JugadorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * The data needed to update a Jugador.
     */
    data: XOR<JugadorUpdateInput, JugadorUncheckedUpdateInput>
    /**
     * Choose, which Jugador to update.
     */
    where: JugadorWhereUniqueInput
  }

  /**
   * Jugador updateMany
   */
  export type JugadorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jugadors.
     */
    data: XOR<JugadorUpdateManyMutationInput, JugadorUncheckedUpdateManyInput>
    /**
     * Filter which Jugadors to update
     */
    where?: JugadorWhereInput
  }

  /**
   * Jugador upsert
   */
  export type JugadorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * The filter to search for the Jugador to update in case it exists.
     */
    where: JugadorWhereUniqueInput
    /**
     * In case the Jugador found by the `where` argument doesn't exist, create a new Jugador with this data.
     */
    create: XOR<JugadorCreateInput, JugadorUncheckedCreateInput>
    /**
     * In case the Jugador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JugadorUpdateInput, JugadorUncheckedUpdateInput>
  }

  /**
   * Jugador delete
   */
  export type JugadorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JugadorInclude<ExtArgs> | null
    /**
     * Filter which Jugador to delete.
     */
    where: JugadorWhereUniqueInput
  }

  /**
   * Jugador deleteMany
   */
  export type JugadorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jugadors to delete
     */
    where?: JugadorWhereInput
  }

  /**
   * Jugador.movimientos
   */
  export type Jugador$movimientosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movimiento
     */
    select?: MovimientoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimientoInclude<ExtArgs> | null
    where?: MovimientoWhereInput
    orderBy?: MovimientoOrderByWithRelationInput | MovimientoOrderByWithRelationInput[]
    cursor?: MovimientoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovimientoScalarFieldEnum | MovimientoScalarFieldEnum[]
  }

  /**
   * Jugador.partidasGanador
   */
  export type Jugador$partidasGanadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    where?: PartidaWhereInput
    orderBy?: PartidaOrderByWithRelationInput | PartidaOrderByWithRelationInput[]
    cursor?: PartidaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartidaScalarFieldEnum | PartidaScalarFieldEnum[]
  }

  /**
   * Jugador.partidasComoJugador1
   */
  export type Jugador$partidasComoJugador1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    where?: PartidaWhereInput
    orderBy?: PartidaOrderByWithRelationInput | PartidaOrderByWithRelationInput[]
    cursor?: PartidaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartidaScalarFieldEnum | PartidaScalarFieldEnum[]
  }

  /**
   * Jugador.partidasComoJugador2
   */
  export type Jugador$partidasComoJugador2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    where?: PartidaWhereInput
    orderBy?: PartidaOrderByWithRelationInput | PartidaOrderByWithRelationInput[]
    cursor?: PartidaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartidaScalarFieldEnum | PartidaScalarFieldEnum[]
  }

  /**
   * Jugador without action
   */
  export type JugadorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JugadorInclude<ExtArgs> | null
  }


  /**
   * Model Partida
   */

  export type AggregatePartida = {
    _count: PartidaCountAggregateOutputType | null
    _avg: PartidaAvgAggregateOutputType | null
    _sum: PartidaSumAggregateOutputType | null
    _min: PartidaMinAggregateOutputType | null
    _max: PartidaMaxAggregateOutputType | null
  }

  export type PartidaAvgAggregateOutputType = {
    id: number | null
    jugador1Id: number | null
    jugador2Id: number | null
    ganadorId: number | null
    turnoActual: number | null
  }

  export type PartidaSumAggregateOutputType = {
    id: number | null
    jugador1Id: number | null
    jugador2Id: number | null
    ganadorId: number | null
    turnoActual: number | null
  }

  export type PartidaMinAggregateOutputType = {
    id: number | null
    jugador1Id: number | null
    jugador2Id: number | null
    estado: string | null
    ganadorId: number | null
    resultado: string | null
    tablero: string | null
    turnoActual: number | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
  }

  export type PartidaMaxAggregateOutputType = {
    id: number | null
    jugador1Id: number | null
    jugador2Id: number | null
    estado: string | null
    ganadorId: number | null
    resultado: string | null
    tablero: string | null
    turnoActual: number | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
  }

  export type PartidaCountAggregateOutputType = {
    id: number
    jugador1Id: number
    jugador2Id: number
    estado: number
    ganadorId: number
    resultado: number
    tablero: number
    turnoActual: number
    fechaCreacion: number
    fechaActualizacion: number
    _all: number
  }


  export type PartidaAvgAggregateInputType = {
    id?: true
    jugador1Id?: true
    jugador2Id?: true
    ganadorId?: true
    turnoActual?: true
  }

  export type PartidaSumAggregateInputType = {
    id?: true
    jugador1Id?: true
    jugador2Id?: true
    ganadorId?: true
    turnoActual?: true
  }

  export type PartidaMinAggregateInputType = {
    id?: true
    jugador1Id?: true
    jugador2Id?: true
    estado?: true
    ganadorId?: true
    resultado?: true
    tablero?: true
    turnoActual?: true
    fechaCreacion?: true
    fechaActualizacion?: true
  }

  export type PartidaMaxAggregateInputType = {
    id?: true
    jugador1Id?: true
    jugador2Id?: true
    estado?: true
    ganadorId?: true
    resultado?: true
    tablero?: true
    turnoActual?: true
    fechaCreacion?: true
    fechaActualizacion?: true
  }

  export type PartidaCountAggregateInputType = {
    id?: true
    jugador1Id?: true
    jugador2Id?: true
    estado?: true
    ganadorId?: true
    resultado?: true
    tablero?: true
    turnoActual?: true
    fechaCreacion?: true
    fechaActualizacion?: true
    _all?: true
  }

  export type PartidaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partida to aggregate.
     */
    where?: PartidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partidas to fetch.
     */
    orderBy?: PartidaOrderByWithRelationInput | PartidaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partidas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Partidas
    **/
    _count?: true | PartidaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartidaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartidaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartidaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartidaMaxAggregateInputType
  }

  export type GetPartidaAggregateType<T extends PartidaAggregateArgs> = {
        [P in keyof T & keyof AggregatePartida]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartida[P]>
      : GetScalarType<T[P], AggregatePartida[P]>
  }




  export type PartidaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartidaWhereInput
    orderBy?: PartidaOrderByWithAggregationInput | PartidaOrderByWithAggregationInput[]
    by: PartidaScalarFieldEnum[] | PartidaScalarFieldEnum
    having?: PartidaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartidaCountAggregateInputType | true
    _avg?: PartidaAvgAggregateInputType
    _sum?: PartidaSumAggregateInputType
    _min?: PartidaMinAggregateInputType
    _max?: PartidaMaxAggregateInputType
  }

  export type PartidaGroupByOutputType = {
    id: number
    jugador1Id: number
    jugador2Id: number
    estado: string
    ganadorId: number | null
    resultado: string | null
    tablero: string
    turnoActual: number
    fechaCreacion: Date
    fechaActualizacion: Date
    _count: PartidaCountAggregateOutputType | null
    _avg: PartidaAvgAggregateOutputType | null
    _sum: PartidaSumAggregateOutputType | null
    _min: PartidaMinAggregateOutputType | null
    _max: PartidaMaxAggregateOutputType | null
  }

  type GetPartidaGroupByPayload<T extends PartidaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartidaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartidaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartidaGroupByOutputType[P]>
            : GetScalarType<T[P], PartidaGroupByOutputType[P]>
        }
      >
    >


  export type PartidaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jugador1Id?: boolean
    jugador2Id?: boolean
    estado?: boolean
    ganadorId?: boolean
    resultado?: boolean
    tablero?: boolean
    turnoActual?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
    movimientos?: boolean | Partida$movimientosArgs<ExtArgs>
    ganador?: boolean | Partida$ganadorArgs<ExtArgs>
    jugador1?: boolean | JugadorDefaultArgs<ExtArgs>
    jugador2?: boolean | JugadorDefaultArgs<ExtArgs>
    _count?: boolean | PartidaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partida"]>


  export type PartidaSelectScalar = {
    id?: boolean
    jugador1Id?: boolean
    jugador2Id?: boolean
    estado?: boolean
    ganadorId?: boolean
    resultado?: boolean
    tablero?: boolean
    turnoActual?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
  }

  export type PartidaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movimientos?: boolean | Partida$movimientosArgs<ExtArgs>
    ganador?: boolean | Partida$ganadorArgs<ExtArgs>
    jugador1?: boolean | JugadorDefaultArgs<ExtArgs>
    jugador2?: boolean | JugadorDefaultArgs<ExtArgs>
    _count?: boolean | PartidaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PartidaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Partida"
    objects: {
      movimientos: Prisma.$MovimientoPayload<ExtArgs>[]
      ganador: Prisma.$JugadorPayload<ExtArgs> | null
      jugador1: Prisma.$JugadorPayload<ExtArgs>
      jugador2: Prisma.$JugadorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      jugador1Id: number
      jugador2Id: number
      estado: string
      ganadorId: number | null
      resultado: string | null
      tablero: string
      turnoActual: number
      fechaCreacion: Date
      fechaActualizacion: Date
    }, ExtArgs["result"]["partida"]>
    composites: {}
  }

  type PartidaGetPayload<S extends boolean | null | undefined | PartidaDefaultArgs> = $Result.GetResult<Prisma.$PartidaPayload, S>

  type PartidaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PartidaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PartidaCountAggregateInputType | true
    }

  export interface PartidaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Partida'], meta: { name: 'Partida' } }
    /**
     * Find zero or one Partida that matches the filter.
     * @param {PartidaFindUniqueArgs} args - Arguments to find a Partida
     * @example
     * // Get one Partida
     * const partida = await prisma.partida.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartidaFindUniqueArgs>(args: SelectSubset<T, PartidaFindUniqueArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Partida that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PartidaFindUniqueOrThrowArgs} args - Arguments to find a Partida
     * @example
     * // Get one Partida
     * const partida = await prisma.partida.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartidaFindUniqueOrThrowArgs>(args: SelectSubset<T, PartidaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Partida that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaFindFirstArgs} args - Arguments to find a Partida
     * @example
     * // Get one Partida
     * const partida = await prisma.partida.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartidaFindFirstArgs>(args?: SelectSubset<T, PartidaFindFirstArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Partida that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaFindFirstOrThrowArgs} args - Arguments to find a Partida
     * @example
     * // Get one Partida
     * const partida = await prisma.partida.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartidaFindFirstOrThrowArgs>(args?: SelectSubset<T, PartidaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Partidas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partidas
     * const partidas = await prisma.partida.findMany()
     * 
     * // Get first 10 Partidas
     * const partidas = await prisma.partida.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partidaWithIdOnly = await prisma.partida.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartidaFindManyArgs>(args?: SelectSubset<T, PartidaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Partida.
     * @param {PartidaCreateArgs} args - Arguments to create a Partida.
     * @example
     * // Create one Partida
     * const Partida = await prisma.partida.create({
     *   data: {
     *     // ... data to create a Partida
     *   }
     * })
     * 
     */
    create<T extends PartidaCreateArgs>(args: SelectSubset<T, PartidaCreateArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Partidas.
     * @param {PartidaCreateManyArgs} args - Arguments to create many Partidas.
     * @example
     * // Create many Partidas
     * const partida = await prisma.partida.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartidaCreateManyArgs>(args?: SelectSubset<T, PartidaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Partida.
     * @param {PartidaDeleteArgs} args - Arguments to delete one Partida.
     * @example
     * // Delete one Partida
     * const Partida = await prisma.partida.delete({
     *   where: {
     *     // ... filter to delete one Partida
     *   }
     * })
     * 
     */
    delete<T extends PartidaDeleteArgs>(args: SelectSubset<T, PartidaDeleteArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Partida.
     * @param {PartidaUpdateArgs} args - Arguments to update one Partida.
     * @example
     * // Update one Partida
     * const partida = await prisma.partida.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartidaUpdateArgs>(args: SelectSubset<T, PartidaUpdateArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Partidas.
     * @param {PartidaDeleteManyArgs} args - Arguments to filter Partidas to delete.
     * @example
     * // Delete a few Partidas
     * const { count } = await prisma.partida.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartidaDeleteManyArgs>(args?: SelectSubset<T, PartidaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partidas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partidas
     * const partida = await prisma.partida.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartidaUpdateManyArgs>(args: SelectSubset<T, PartidaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Partida.
     * @param {PartidaUpsertArgs} args - Arguments to update or create a Partida.
     * @example
     * // Update or create a Partida
     * const partida = await prisma.partida.upsert({
     *   create: {
     *     // ... data to create a Partida
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partida we want to update
     *   }
     * })
     */
    upsert<T extends PartidaUpsertArgs>(args: SelectSubset<T, PartidaUpsertArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Partidas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaCountArgs} args - Arguments to filter Partidas to count.
     * @example
     * // Count the number of Partidas
     * const count = await prisma.partida.count({
     *   where: {
     *     // ... the filter for the Partidas we want to count
     *   }
     * })
    **/
    count<T extends PartidaCountArgs>(
      args?: Subset<T, PartidaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartidaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partida.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartidaAggregateArgs>(args: Subset<T, PartidaAggregateArgs>): Prisma.PrismaPromise<GetPartidaAggregateType<T>>

    /**
     * Group by Partida.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartidaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartidaGroupByArgs['orderBy'] }
        : { orderBy?: PartidaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartidaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartidaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Partida model
   */
  readonly fields: PartidaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Partida.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartidaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    movimientos<T extends Partida$movimientosArgs<ExtArgs> = {}>(args?: Subset<T, Partida$movimientosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovimientoPayload<ExtArgs>, T, "findMany"> | Null>
    ganador<T extends Partida$ganadorArgs<ExtArgs> = {}>(args?: Subset<T, Partida$ganadorArgs<ExtArgs>>): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    jugador1<T extends JugadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JugadorDefaultArgs<ExtArgs>>): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jugador2<T extends JugadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JugadorDefaultArgs<ExtArgs>>): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Partida model
   */ 
  interface PartidaFieldRefs {
    readonly id: FieldRef<"Partida", 'Int'>
    readonly jugador1Id: FieldRef<"Partida", 'Int'>
    readonly jugador2Id: FieldRef<"Partida", 'Int'>
    readonly estado: FieldRef<"Partida", 'String'>
    readonly ganadorId: FieldRef<"Partida", 'Int'>
    readonly resultado: FieldRef<"Partida", 'String'>
    readonly tablero: FieldRef<"Partida", 'String'>
    readonly turnoActual: FieldRef<"Partida", 'Int'>
    readonly fechaCreacion: FieldRef<"Partida", 'DateTime'>
    readonly fechaActualizacion: FieldRef<"Partida", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Partida findUnique
   */
  export type PartidaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * Filter, which Partida to fetch.
     */
    where: PartidaWhereUniqueInput
  }

  /**
   * Partida findUniqueOrThrow
   */
  export type PartidaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * Filter, which Partida to fetch.
     */
    where: PartidaWhereUniqueInput
  }

  /**
   * Partida findFirst
   */
  export type PartidaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * Filter, which Partida to fetch.
     */
    where?: PartidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partidas to fetch.
     */
    orderBy?: PartidaOrderByWithRelationInput | PartidaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partidas.
     */
    cursor?: PartidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partidas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partidas.
     */
    distinct?: PartidaScalarFieldEnum | PartidaScalarFieldEnum[]
  }

  /**
   * Partida findFirstOrThrow
   */
  export type PartidaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * Filter, which Partida to fetch.
     */
    where?: PartidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partidas to fetch.
     */
    orderBy?: PartidaOrderByWithRelationInput | PartidaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partidas.
     */
    cursor?: PartidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partidas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partidas.
     */
    distinct?: PartidaScalarFieldEnum | PartidaScalarFieldEnum[]
  }

  /**
   * Partida findMany
   */
  export type PartidaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * Filter, which Partidas to fetch.
     */
    where?: PartidaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partidas to fetch.
     */
    orderBy?: PartidaOrderByWithRelationInput | PartidaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Partidas.
     */
    cursor?: PartidaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partidas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partidas.
     */
    skip?: number
    distinct?: PartidaScalarFieldEnum | PartidaScalarFieldEnum[]
  }

  /**
   * Partida create
   */
  export type PartidaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * The data needed to create a Partida.
     */
    data: XOR<PartidaCreateInput, PartidaUncheckedCreateInput>
  }

  /**
   * Partida createMany
   */
  export type PartidaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Partidas.
     */
    data: PartidaCreateManyInput | PartidaCreateManyInput[]
  }

  /**
   * Partida update
   */
  export type PartidaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * The data needed to update a Partida.
     */
    data: XOR<PartidaUpdateInput, PartidaUncheckedUpdateInput>
    /**
     * Choose, which Partida to update.
     */
    where: PartidaWhereUniqueInput
  }

  /**
   * Partida updateMany
   */
  export type PartidaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Partidas.
     */
    data: XOR<PartidaUpdateManyMutationInput, PartidaUncheckedUpdateManyInput>
    /**
     * Filter which Partidas to update
     */
    where?: PartidaWhereInput
  }

  /**
   * Partida upsert
   */
  export type PartidaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * The filter to search for the Partida to update in case it exists.
     */
    where: PartidaWhereUniqueInput
    /**
     * In case the Partida found by the `where` argument doesn't exist, create a new Partida with this data.
     */
    create: XOR<PartidaCreateInput, PartidaUncheckedCreateInput>
    /**
     * In case the Partida was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartidaUpdateInput, PartidaUncheckedUpdateInput>
  }

  /**
   * Partida delete
   */
  export type PartidaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
    /**
     * Filter which Partida to delete.
     */
    where: PartidaWhereUniqueInput
  }

  /**
   * Partida deleteMany
   */
  export type PartidaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partidas to delete
     */
    where?: PartidaWhereInput
  }

  /**
   * Partida.movimientos
   */
  export type Partida$movimientosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movimiento
     */
    select?: MovimientoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimientoInclude<ExtArgs> | null
    where?: MovimientoWhereInput
    orderBy?: MovimientoOrderByWithRelationInput | MovimientoOrderByWithRelationInput[]
    cursor?: MovimientoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovimientoScalarFieldEnum | MovimientoScalarFieldEnum[]
  }

  /**
   * Partida.ganador
   */
  export type Partida$ganadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador
     */
    select?: JugadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JugadorInclude<ExtArgs> | null
    where?: JugadorWhereInput
  }

  /**
   * Partida without action
   */
  export type PartidaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida
     */
    select?: PartidaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidaInclude<ExtArgs> | null
  }


  /**
   * Model Movimiento
   */

  export type AggregateMovimiento = {
    _count: MovimientoCountAggregateOutputType | null
    _avg: MovimientoAvgAggregateOutputType | null
    _sum: MovimientoSumAggregateOutputType | null
    _min: MovimientoMinAggregateOutputType | null
    _max: MovimientoMaxAggregateOutputType | null
  }

  export type MovimientoAvgAggregateOutputType = {
    id: number | null
    partidaId: number | null
    jugadorId: number | null
    filaPosicion: number | null
    numeroMovimiento: number | null
  }

  export type MovimientoSumAggregateOutputType = {
    id: number | null
    partidaId: number | null
    jugadorId: number | null
    filaPosicion: number | null
    numeroMovimiento: number | null
  }

  export type MovimientoMinAggregateOutputType = {
    id: number | null
    partidaId: number | null
    jugadorId: number | null
    columnaLetra: string | null
    filaPosicion: number | null
    numeroMovimiento: number | null
    fechaCreacion: Date | null
  }

  export type MovimientoMaxAggregateOutputType = {
    id: number | null
    partidaId: number | null
    jugadorId: number | null
    columnaLetra: string | null
    filaPosicion: number | null
    numeroMovimiento: number | null
    fechaCreacion: Date | null
  }

  export type MovimientoCountAggregateOutputType = {
    id: number
    partidaId: number
    jugadorId: number
    columnaLetra: number
    filaPosicion: number
    numeroMovimiento: number
    fechaCreacion: number
    _all: number
  }


  export type MovimientoAvgAggregateInputType = {
    id?: true
    partidaId?: true
    jugadorId?: true
    filaPosicion?: true
    numeroMovimiento?: true
  }

  export type MovimientoSumAggregateInputType = {
    id?: true
    partidaId?: true
    jugadorId?: true
    filaPosicion?: true
    numeroMovimiento?: true
  }

  export type MovimientoMinAggregateInputType = {
    id?: true
    partidaId?: true
    jugadorId?: true
    columnaLetra?: true
    filaPosicion?: true
    numeroMovimiento?: true
    fechaCreacion?: true
  }

  export type MovimientoMaxAggregateInputType = {
    id?: true
    partidaId?: true
    jugadorId?: true
    columnaLetra?: true
    filaPosicion?: true
    numeroMovimiento?: true
    fechaCreacion?: true
  }

  export type MovimientoCountAggregateInputType = {
    id?: true
    partidaId?: true
    jugadorId?: true
    columnaLetra?: true
    filaPosicion?: true
    numeroMovimiento?: true
    fechaCreacion?: true
    _all?: true
  }

  export type MovimientoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movimiento to aggregate.
     */
    where?: MovimientoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movimientos to fetch.
     */
    orderBy?: MovimientoOrderByWithRelationInput | MovimientoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovimientoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movimientos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movimientos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Movimientos
    **/
    _count?: true | MovimientoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovimientoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovimientoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovimientoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovimientoMaxAggregateInputType
  }

  export type GetMovimientoAggregateType<T extends MovimientoAggregateArgs> = {
        [P in keyof T & keyof AggregateMovimiento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovimiento[P]>
      : GetScalarType<T[P], AggregateMovimiento[P]>
  }




  export type MovimientoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovimientoWhereInput
    orderBy?: MovimientoOrderByWithAggregationInput | MovimientoOrderByWithAggregationInput[]
    by: MovimientoScalarFieldEnum[] | MovimientoScalarFieldEnum
    having?: MovimientoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovimientoCountAggregateInputType | true
    _avg?: MovimientoAvgAggregateInputType
    _sum?: MovimientoSumAggregateInputType
    _min?: MovimientoMinAggregateInputType
    _max?: MovimientoMaxAggregateInputType
  }

  export type MovimientoGroupByOutputType = {
    id: number
    partidaId: number
    jugadorId: number
    columnaLetra: string
    filaPosicion: number
    numeroMovimiento: number
    fechaCreacion: Date
    _count: MovimientoCountAggregateOutputType | null
    _avg: MovimientoAvgAggregateOutputType | null
    _sum: MovimientoSumAggregateOutputType | null
    _min: MovimientoMinAggregateOutputType | null
    _max: MovimientoMaxAggregateOutputType | null
  }

  type GetMovimientoGroupByPayload<T extends MovimientoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovimientoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovimientoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovimientoGroupByOutputType[P]>
            : GetScalarType<T[P], MovimientoGroupByOutputType[P]>
        }
      >
    >


  export type MovimientoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partidaId?: boolean
    jugadorId?: boolean
    columnaLetra?: boolean
    filaPosicion?: boolean
    numeroMovimiento?: boolean
    fechaCreacion?: boolean
    jugador?: boolean | JugadorDefaultArgs<ExtArgs>
    partida?: boolean | PartidaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movimiento"]>


  export type MovimientoSelectScalar = {
    id?: boolean
    partidaId?: boolean
    jugadorId?: boolean
    columnaLetra?: boolean
    filaPosicion?: boolean
    numeroMovimiento?: boolean
    fechaCreacion?: boolean
  }

  export type MovimientoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jugador?: boolean | JugadorDefaultArgs<ExtArgs>
    partida?: boolean | PartidaDefaultArgs<ExtArgs>
  }

  export type $MovimientoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Movimiento"
    objects: {
      jugador: Prisma.$JugadorPayload<ExtArgs>
      partida: Prisma.$PartidaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      partidaId: number
      jugadorId: number
      columnaLetra: string
      filaPosicion: number
      numeroMovimiento: number
      fechaCreacion: Date
    }, ExtArgs["result"]["movimiento"]>
    composites: {}
  }

  type MovimientoGetPayload<S extends boolean | null | undefined | MovimientoDefaultArgs> = $Result.GetResult<Prisma.$MovimientoPayload, S>

  type MovimientoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MovimientoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MovimientoCountAggregateInputType | true
    }

  export interface MovimientoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Movimiento'], meta: { name: 'Movimiento' } }
    /**
     * Find zero or one Movimiento that matches the filter.
     * @param {MovimientoFindUniqueArgs} args - Arguments to find a Movimiento
     * @example
     * // Get one Movimiento
     * const movimiento = await prisma.movimiento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MovimientoFindUniqueArgs>(args: SelectSubset<T, MovimientoFindUniqueArgs<ExtArgs>>): Prisma__MovimientoClient<$Result.GetResult<Prisma.$MovimientoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Movimiento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MovimientoFindUniqueOrThrowArgs} args - Arguments to find a Movimiento
     * @example
     * // Get one Movimiento
     * const movimiento = await prisma.movimiento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MovimientoFindUniqueOrThrowArgs>(args: SelectSubset<T, MovimientoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MovimientoClient<$Result.GetResult<Prisma.$MovimientoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Movimiento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimientoFindFirstArgs} args - Arguments to find a Movimiento
     * @example
     * // Get one Movimiento
     * const movimiento = await prisma.movimiento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MovimientoFindFirstArgs>(args?: SelectSubset<T, MovimientoFindFirstArgs<ExtArgs>>): Prisma__MovimientoClient<$Result.GetResult<Prisma.$MovimientoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Movimiento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimientoFindFirstOrThrowArgs} args - Arguments to find a Movimiento
     * @example
     * // Get one Movimiento
     * const movimiento = await prisma.movimiento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MovimientoFindFirstOrThrowArgs>(args?: SelectSubset<T, MovimientoFindFirstOrThrowArgs<ExtArgs>>): Prisma__MovimientoClient<$Result.GetResult<Prisma.$MovimientoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Movimientos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimientoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Movimientos
     * const movimientos = await prisma.movimiento.findMany()
     * 
     * // Get first 10 Movimientos
     * const movimientos = await prisma.movimiento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const movimientoWithIdOnly = await prisma.movimiento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MovimientoFindManyArgs>(args?: SelectSubset<T, MovimientoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovimientoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Movimiento.
     * @param {MovimientoCreateArgs} args - Arguments to create a Movimiento.
     * @example
     * // Create one Movimiento
     * const Movimiento = await prisma.movimiento.create({
     *   data: {
     *     // ... data to create a Movimiento
     *   }
     * })
     * 
     */
    create<T extends MovimientoCreateArgs>(args: SelectSubset<T, MovimientoCreateArgs<ExtArgs>>): Prisma__MovimientoClient<$Result.GetResult<Prisma.$MovimientoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Movimientos.
     * @param {MovimientoCreateManyArgs} args - Arguments to create many Movimientos.
     * @example
     * // Create many Movimientos
     * const movimiento = await prisma.movimiento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MovimientoCreateManyArgs>(args?: SelectSubset<T, MovimientoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Movimiento.
     * @param {MovimientoDeleteArgs} args - Arguments to delete one Movimiento.
     * @example
     * // Delete one Movimiento
     * const Movimiento = await prisma.movimiento.delete({
     *   where: {
     *     // ... filter to delete one Movimiento
     *   }
     * })
     * 
     */
    delete<T extends MovimientoDeleteArgs>(args: SelectSubset<T, MovimientoDeleteArgs<ExtArgs>>): Prisma__MovimientoClient<$Result.GetResult<Prisma.$MovimientoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Movimiento.
     * @param {MovimientoUpdateArgs} args - Arguments to update one Movimiento.
     * @example
     * // Update one Movimiento
     * const movimiento = await prisma.movimiento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MovimientoUpdateArgs>(args: SelectSubset<T, MovimientoUpdateArgs<ExtArgs>>): Prisma__MovimientoClient<$Result.GetResult<Prisma.$MovimientoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Movimientos.
     * @param {MovimientoDeleteManyArgs} args - Arguments to filter Movimientos to delete.
     * @example
     * // Delete a few Movimientos
     * const { count } = await prisma.movimiento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MovimientoDeleteManyArgs>(args?: SelectSubset<T, MovimientoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Movimientos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimientoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Movimientos
     * const movimiento = await prisma.movimiento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MovimientoUpdateManyArgs>(args: SelectSubset<T, MovimientoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Movimiento.
     * @param {MovimientoUpsertArgs} args - Arguments to update or create a Movimiento.
     * @example
     * // Update or create a Movimiento
     * const movimiento = await prisma.movimiento.upsert({
     *   create: {
     *     // ... data to create a Movimiento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Movimiento we want to update
     *   }
     * })
     */
    upsert<T extends MovimientoUpsertArgs>(args: SelectSubset<T, MovimientoUpsertArgs<ExtArgs>>): Prisma__MovimientoClient<$Result.GetResult<Prisma.$MovimientoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Movimientos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimientoCountArgs} args - Arguments to filter Movimientos to count.
     * @example
     * // Count the number of Movimientos
     * const count = await prisma.movimiento.count({
     *   where: {
     *     // ... the filter for the Movimientos we want to count
     *   }
     * })
    **/
    count<T extends MovimientoCountArgs>(
      args?: Subset<T, MovimientoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovimientoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Movimiento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimientoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovimientoAggregateArgs>(args: Subset<T, MovimientoAggregateArgs>): Prisma.PrismaPromise<GetMovimientoAggregateType<T>>

    /**
     * Group by Movimiento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovimientoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovimientoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovimientoGroupByArgs['orderBy'] }
        : { orderBy?: MovimientoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovimientoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovimientoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Movimiento model
   */
  readonly fields: MovimientoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Movimiento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MovimientoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jugador<T extends JugadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JugadorDefaultArgs<ExtArgs>>): Prisma__JugadorClient<$Result.GetResult<Prisma.$JugadorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    partida<T extends PartidaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PartidaDefaultArgs<ExtArgs>>): Prisma__PartidaClient<$Result.GetResult<Prisma.$PartidaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Movimiento model
   */ 
  interface MovimientoFieldRefs {
    readonly id: FieldRef<"Movimiento", 'Int'>
    readonly partidaId: FieldRef<"Movimiento", 'Int'>
    readonly jugadorId: FieldRef<"Movimiento", 'Int'>
    readonly columnaLetra: FieldRef<"Movimiento", 'String'>
    readonly filaPosicion: FieldRef<"Movimiento", 'Int'>
    readonly numeroMovimiento: FieldRef<"Movimiento", 'Int'>
    readonly fechaCreacion: FieldRef<"Movimiento", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Movimiento findUnique
   */
  export type MovimientoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movimiento
     */
    select?: MovimientoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimientoInclude<ExtArgs> | null
    /**
     * Filter, which Movimiento to fetch.
     */
    where: MovimientoWhereUniqueInput
  }

  /**
   * Movimiento findUniqueOrThrow
   */
  export type MovimientoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movimiento
     */
    select?: MovimientoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimientoInclude<ExtArgs> | null
    /**
     * Filter, which Movimiento to fetch.
     */
    where: MovimientoWhereUniqueInput
  }

  /**
   * Movimiento findFirst
   */
  export type MovimientoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movimiento
     */
    select?: MovimientoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimientoInclude<ExtArgs> | null
    /**
     * Filter, which Movimiento to fetch.
     */
    where?: MovimientoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movimientos to fetch.
     */
    orderBy?: MovimientoOrderByWithRelationInput | MovimientoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movimientos.
     */
    cursor?: MovimientoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movimientos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movimientos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movimientos.
     */
    distinct?: MovimientoScalarFieldEnum | MovimientoScalarFieldEnum[]
  }

  /**
   * Movimiento findFirstOrThrow
   */
  export type MovimientoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movimiento
     */
    select?: MovimientoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimientoInclude<ExtArgs> | null
    /**
     * Filter, which Movimiento to fetch.
     */
    where?: MovimientoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movimientos to fetch.
     */
    orderBy?: MovimientoOrderByWithRelationInput | MovimientoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movimientos.
     */
    cursor?: MovimientoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movimientos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movimientos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movimientos.
     */
    distinct?: MovimientoScalarFieldEnum | MovimientoScalarFieldEnum[]
  }

  /**
   * Movimiento findMany
   */
  export type MovimientoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movimiento
     */
    select?: MovimientoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimientoInclude<ExtArgs> | null
    /**
     * Filter, which Movimientos to fetch.
     */
    where?: MovimientoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movimientos to fetch.
     */
    orderBy?: MovimientoOrderByWithRelationInput | MovimientoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Movimientos.
     */
    cursor?: MovimientoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movimientos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movimientos.
     */
    skip?: number
    distinct?: MovimientoScalarFieldEnum | MovimientoScalarFieldEnum[]
  }

  /**
   * Movimiento create
   */
  export type MovimientoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movimiento
     */
    select?: MovimientoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimientoInclude<ExtArgs> | null
    /**
     * The data needed to create a Movimiento.
     */
    data: XOR<MovimientoCreateInput, MovimientoUncheckedCreateInput>
  }

  /**
   * Movimiento createMany
   */
  export type MovimientoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Movimientos.
     */
    data: MovimientoCreateManyInput | MovimientoCreateManyInput[]
  }

  /**
   * Movimiento update
   */
  export type MovimientoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movimiento
     */
    select?: MovimientoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimientoInclude<ExtArgs> | null
    /**
     * The data needed to update a Movimiento.
     */
    data: XOR<MovimientoUpdateInput, MovimientoUncheckedUpdateInput>
    /**
     * Choose, which Movimiento to update.
     */
    where: MovimientoWhereUniqueInput
  }

  /**
   * Movimiento updateMany
   */
  export type MovimientoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Movimientos.
     */
    data: XOR<MovimientoUpdateManyMutationInput, MovimientoUncheckedUpdateManyInput>
    /**
     * Filter which Movimientos to update
     */
    where?: MovimientoWhereInput
  }

  /**
   * Movimiento upsert
   */
  export type MovimientoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movimiento
     */
    select?: MovimientoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimientoInclude<ExtArgs> | null
    /**
     * The filter to search for the Movimiento to update in case it exists.
     */
    where: MovimientoWhereUniqueInput
    /**
     * In case the Movimiento found by the `where` argument doesn't exist, create a new Movimiento with this data.
     */
    create: XOR<MovimientoCreateInput, MovimientoUncheckedCreateInput>
    /**
     * In case the Movimiento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovimientoUpdateInput, MovimientoUncheckedUpdateInput>
  }

  /**
   * Movimiento delete
   */
  export type MovimientoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movimiento
     */
    select?: MovimientoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimientoInclude<ExtArgs> | null
    /**
     * Filter which Movimiento to delete.
     */
    where: MovimientoWhereUniqueInput
  }

  /**
   * Movimiento deleteMany
   */
  export type MovimientoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movimientos to delete
     */
    where?: MovimientoWhereInput
  }

  /**
   * Movimiento without action
   */
  export type MovimientoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movimiento
     */
    select?: MovimientoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovimientoInclude<ExtArgs> | null
  }


  /**
   * Model Jugador_backup
   */

  export type AggregateJugador_backup = {
    _count: Jugador_backupCountAggregateOutputType | null
    _avg: Jugador_backupAvgAggregateOutputType | null
    _sum: Jugador_backupSumAggregateOutputType | null
    _min: Jugador_backupMinAggregateOutputType | null
    _max: Jugador_backupMaxAggregateOutputType | null
  }

  export type Jugador_backupAvgAggregateOutputType = {
    idJugador: number | null
    marcador: number | null
  }

  export type Jugador_backupSumAggregateOutputType = {
    idJugador: number | null
    marcador: number | null
  }

  export type Jugador_backupMinAggregateOutputType = {
    idJugador: number | null
    nombre: string | null
    marcador: number | null
  }

  export type Jugador_backupMaxAggregateOutputType = {
    idJugador: number | null
    nombre: string | null
    marcador: number | null
  }

  export type Jugador_backupCountAggregateOutputType = {
    idJugador: number
    nombre: number
    marcador: number
    _all: number
  }


  export type Jugador_backupAvgAggregateInputType = {
    idJugador?: true
    marcador?: true
  }

  export type Jugador_backupSumAggregateInputType = {
    idJugador?: true
    marcador?: true
  }

  export type Jugador_backupMinAggregateInputType = {
    idJugador?: true
    nombre?: true
    marcador?: true
  }

  export type Jugador_backupMaxAggregateInputType = {
    idJugador?: true
    nombre?: true
    marcador?: true
  }

  export type Jugador_backupCountAggregateInputType = {
    idJugador?: true
    nombre?: true
    marcador?: true
    _all?: true
  }

  export type Jugador_backupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jugador_backup to aggregate.
     */
    where?: Jugador_backupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jugador_backups to fetch.
     */
    orderBy?: Jugador_backupOrderByWithRelationInput | Jugador_backupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Jugador_backupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jugador_backups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jugador_backups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jugador_backups
    **/
    _count?: true | Jugador_backupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Jugador_backupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Jugador_backupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Jugador_backupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Jugador_backupMaxAggregateInputType
  }

  export type GetJugador_backupAggregateType<T extends Jugador_backupAggregateArgs> = {
        [P in keyof T & keyof AggregateJugador_backup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJugador_backup[P]>
      : GetScalarType<T[P], AggregateJugador_backup[P]>
  }




  export type Jugador_backupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Jugador_backupWhereInput
    orderBy?: Jugador_backupOrderByWithAggregationInput | Jugador_backupOrderByWithAggregationInput[]
    by: Jugador_backupScalarFieldEnum[] | Jugador_backupScalarFieldEnum
    having?: Jugador_backupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Jugador_backupCountAggregateInputType | true
    _avg?: Jugador_backupAvgAggregateInputType
    _sum?: Jugador_backupSumAggregateInputType
    _min?: Jugador_backupMinAggregateInputType
    _max?: Jugador_backupMaxAggregateInputType
  }

  export type Jugador_backupGroupByOutputType = {
    idJugador: number
    nombre: string
    marcador: number
    _count: Jugador_backupCountAggregateOutputType | null
    _avg: Jugador_backupAvgAggregateOutputType | null
    _sum: Jugador_backupSumAggregateOutputType | null
    _min: Jugador_backupMinAggregateOutputType | null
    _max: Jugador_backupMaxAggregateOutputType | null
  }

  type GetJugador_backupGroupByPayload<T extends Jugador_backupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Jugador_backupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Jugador_backupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Jugador_backupGroupByOutputType[P]>
            : GetScalarType<T[P], Jugador_backupGroupByOutputType[P]>
        }
      >
    >


  export type Jugador_backupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idJugador?: boolean
    nombre?: boolean
    marcador?: boolean
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: boolean | Jugador_backup$Partida_backup_Partida_backup_idJugador1ToJugador_backupArgs<ExtArgs>
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: boolean | Jugador_backup$Partida_backup_Partida_backup_idJugador2ToJugador_backupArgs<ExtArgs>
    _count?: boolean | Jugador_backupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jugador_backup"]>


  export type Jugador_backupSelectScalar = {
    idJugador?: boolean
    nombre?: boolean
    marcador?: boolean
  }

  export type Jugador_backupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: boolean | Jugador_backup$Partida_backup_Partida_backup_idJugador1ToJugador_backupArgs<ExtArgs>
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: boolean | Jugador_backup$Partida_backup_Partida_backup_idJugador2ToJugador_backupArgs<ExtArgs>
    _count?: boolean | Jugador_backupCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $Jugador_backupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Jugador_backup"
    objects: {
      Partida_backup_Partida_backup_idJugador1ToJugador_backup: Prisma.$Partida_backupPayload<ExtArgs>[]
      Partida_backup_Partida_backup_idJugador2ToJugador_backup: Prisma.$Partida_backupPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idJugador: number
      nombre: string
      marcador: number
    }, ExtArgs["result"]["jugador_backup"]>
    composites: {}
  }

  type Jugador_backupGetPayload<S extends boolean | null | undefined | Jugador_backupDefaultArgs> = $Result.GetResult<Prisma.$Jugador_backupPayload, S>

  type Jugador_backupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Jugador_backupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Jugador_backupCountAggregateInputType | true
    }

  export interface Jugador_backupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Jugador_backup'], meta: { name: 'Jugador_backup' } }
    /**
     * Find zero or one Jugador_backup that matches the filter.
     * @param {Jugador_backupFindUniqueArgs} args - Arguments to find a Jugador_backup
     * @example
     * // Get one Jugador_backup
     * const jugador_backup = await prisma.jugador_backup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Jugador_backupFindUniqueArgs>(args: SelectSubset<T, Jugador_backupFindUniqueArgs<ExtArgs>>): Prisma__Jugador_backupClient<$Result.GetResult<Prisma.$Jugador_backupPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Jugador_backup that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {Jugador_backupFindUniqueOrThrowArgs} args - Arguments to find a Jugador_backup
     * @example
     * // Get one Jugador_backup
     * const jugador_backup = await prisma.jugador_backup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Jugador_backupFindUniqueOrThrowArgs>(args: SelectSubset<T, Jugador_backupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Jugador_backupClient<$Result.GetResult<Prisma.$Jugador_backupPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Jugador_backup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jugador_backupFindFirstArgs} args - Arguments to find a Jugador_backup
     * @example
     * // Get one Jugador_backup
     * const jugador_backup = await prisma.jugador_backup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Jugador_backupFindFirstArgs>(args?: SelectSubset<T, Jugador_backupFindFirstArgs<ExtArgs>>): Prisma__Jugador_backupClient<$Result.GetResult<Prisma.$Jugador_backupPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Jugador_backup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jugador_backupFindFirstOrThrowArgs} args - Arguments to find a Jugador_backup
     * @example
     * // Get one Jugador_backup
     * const jugador_backup = await prisma.jugador_backup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Jugador_backupFindFirstOrThrowArgs>(args?: SelectSubset<T, Jugador_backupFindFirstOrThrowArgs<ExtArgs>>): Prisma__Jugador_backupClient<$Result.GetResult<Prisma.$Jugador_backupPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Jugador_backups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jugador_backupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jugador_backups
     * const jugador_backups = await prisma.jugador_backup.findMany()
     * 
     * // Get first 10 Jugador_backups
     * const jugador_backups = await prisma.jugador_backup.findMany({ take: 10 })
     * 
     * // Only select the `idJugador`
     * const jugador_backupWithIdJugadorOnly = await prisma.jugador_backup.findMany({ select: { idJugador: true } })
     * 
     */
    findMany<T extends Jugador_backupFindManyArgs>(args?: SelectSubset<T, Jugador_backupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Jugador_backupPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Jugador_backup.
     * @param {Jugador_backupCreateArgs} args - Arguments to create a Jugador_backup.
     * @example
     * // Create one Jugador_backup
     * const Jugador_backup = await prisma.jugador_backup.create({
     *   data: {
     *     // ... data to create a Jugador_backup
     *   }
     * })
     * 
     */
    create<T extends Jugador_backupCreateArgs>(args: SelectSubset<T, Jugador_backupCreateArgs<ExtArgs>>): Prisma__Jugador_backupClient<$Result.GetResult<Prisma.$Jugador_backupPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Jugador_backups.
     * @param {Jugador_backupCreateManyArgs} args - Arguments to create many Jugador_backups.
     * @example
     * // Create many Jugador_backups
     * const jugador_backup = await prisma.jugador_backup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Jugador_backupCreateManyArgs>(args?: SelectSubset<T, Jugador_backupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Jugador_backup.
     * @param {Jugador_backupDeleteArgs} args - Arguments to delete one Jugador_backup.
     * @example
     * // Delete one Jugador_backup
     * const Jugador_backup = await prisma.jugador_backup.delete({
     *   where: {
     *     // ... filter to delete one Jugador_backup
     *   }
     * })
     * 
     */
    delete<T extends Jugador_backupDeleteArgs>(args: SelectSubset<T, Jugador_backupDeleteArgs<ExtArgs>>): Prisma__Jugador_backupClient<$Result.GetResult<Prisma.$Jugador_backupPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Jugador_backup.
     * @param {Jugador_backupUpdateArgs} args - Arguments to update one Jugador_backup.
     * @example
     * // Update one Jugador_backup
     * const jugador_backup = await prisma.jugador_backup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Jugador_backupUpdateArgs>(args: SelectSubset<T, Jugador_backupUpdateArgs<ExtArgs>>): Prisma__Jugador_backupClient<$Result.GetResult<Prisma.$Jugador_backupPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Jugador_backups.
     * @param {Jugador_backupDeleteManyArgs} args - Arguments to filter Jugador_backups to delete.
     * @example
     * // Delete a few Jugador_backups
     * const { count } = await prisma.jugador_backup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Jugador_backupDeleteManyArgs>(args?: SelectSubset<T, Jugador_backupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jugador_backups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jugador_backupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jugador_backups
     * const jugador_backup = await prisma.jugador_backup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Jugador_backupUpdateManyArgs>(args: SelectSubset<T, Jugador_backupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jugador_backup.
     * @param {Jugador_backupUpsertArgs} args - Arguments to update or create a Jugador_backup.
     * @example
     * // Update or create a Jugador_backup
     * const jugador_backup = await prisma.jugador_backup.upsert({
     *   create: {
     *     // ... data to create a Jugador_backup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jugador_backup we want to update
     *   }
     * })
     */
    upsert<T extends Jugador_backupUpsertArgs>(args: SelectSubset<T, Jugador_backupUpsertArgs<ExtArgs>>): Prisma__Jugador_backupClient<$Result.GetResult<Prisma.$Jugador_backupPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Jugador_backups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jugador_backupCountArgs} args - Arguments to filter Jugador_backups to count.
     * @example
     * // Count the number of Jugador_backups
     * const count = await prisma.jugador_backup.count({
     *   where: {
     *     // ... the filter for the Jugador_backups we want to count
     *   }
     * })
    **/
    count<T extends Jugador_backupCountArgs>(
      args?: Subset<T, Jugador_backupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Jugador_backupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jugador_backup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jugador_backupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Jugador_backupAggregateArgs>(args: Subset<T, Jugador_backupAggregateArgs>): Prisma.PrismaPromise<GetJugador_backupAggregateType<T>>

    /**
     * Group by Jugador_backup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jugador_backupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Jugador_backupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Jugador_backupGroupByArgs['orderBy'] }
        : { orderBy?: Jugador_backupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Jugador_backupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJugador_backupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Jugador_backup model
   */
  readonly fields: Jugador_backupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Jugador_backup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Jugador_backupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Partida_backup_Partida_backup_idJugador1ToJugador_backup<T extends Jugador_backup$Partida_backup_Partida_backup_idJugador1ToJugador_backupArgs<ExtArgs> = {}>(args?: Subset<T, Jugador_backup$Partida_backup_Partida_backup_idJugador1ToJugador_backupArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Partida_backupPayload<ExtArgs>, T, "findMany"> | Null>
    Partida_backup_Partida_backup_idJugador2ToJugador_backup<T extends Jugador_backup$Partida_backup_Partida_backup_idJugador2ToJugador_backupArgs<ExtArgs> = {}>(args?: Subset<T, Jugador_backup$Partida_backup_Partida_backup_idJugador2ToJugador_backupArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Partida_backupPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Jugador_backup model
   */ 
  interface Jugador_backupFieldRefs {
    readonly idJugador: FieldRef<"Jugador_backup", 'Int'>
    readonly nombre: FieldRef<"Jugador_backup", 'String'>
    readonly marcador: FieldRef<"Jugador_backup", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Jugador_backup findUnique
   */
  export type Jugador_backupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador_backup
     */
    select?: Jugador_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Jugador_backupInclude<ExtArgs> | null
    /**
     * Filter, which Jugador_backup to fetch.
     */
    where: Jugador_backupWhereUniqueInput
  }

  /**
   * Jugador_backup findUniqueOrThrow
   */
  export type Jugador_backupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador_backup
     */
    select?: Jugador_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Jugador_backupInclude<ExtArgs> | null
    /**
     * Filter, which Jugador_backup to fetch.
     */
    where: Jugador_backupWhereUniqueInput
  }

  /**
   * Jugador_backup findFirst
   */
  export type Jugador_backupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador_backup
     */
    select?: Jugador_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Jugador_backupInclude<ExtArgs> | null
    /**
     * Filter, which Jugador_backup to fetch.
     */
    where?: Jugador_backupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jugador_backups to fetch.
     */
    orderBy?: Jugador_backupOrderByWithRelationInput | Jugador_backupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jugador_backups.
     */
    cursor?: Jugador_backupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jugador_backups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jugador_backups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jugador_backups.
     */
    distinct?: Jugador_backupScalarFieldEnum | Jugador_backupScalarFieldEnum[]
  }

  /**
   * Jugador_backup findFirstOrThrow
   */
  export type Jugador_backupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador_backup
     */
    select?: Jugador_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Jugador_backupInclude<ExtArgs> | null
    /**
     * Filter, which Jugador_backup to fetch.
     */
    where?: Jugador_backupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jugador_backups to fetch.
     */
    orderBy?: Jugador_backupOrderByWithRelationInput | Jugador_backupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jugador_backups.
     */
    cursor?: Jugador_backupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jugador_backups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jugador_backups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jugador_backups.
     */
    distinct?: Jugador_backupScalarFieldEnum | Jugador_backupScalarFieldEnum[]
  }

  /**
   * Jugador_backup findMany
   */
  export type Jugador_backupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador_backup
     */
    select?: Jugador_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Jugador_backupInclude<ExtArgs> | null
    /**
     * Filter, which Jugador_backups to fetch.
     */
    where?: Jugador_backupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jugador_backups to fetch.
     */
    orderBy?: Jugador_backupOrderByWithRelationInput | Jugador_backupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jugador_backups.
     */
    cursor?: Jugador_backupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jugador_backups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jugador_backups.
     */
    skip?: number
    distinct?: Jugador_backupScalarFieldEnum | Jugador_backupScalarFieldEnum[]
  }

  /**
   * Jugador_backup create
   */
  export type Jugador_backupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador_backup
     */
    select?: Jugador_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Jugador_backupInclude<ExtArgs> | null
    /**
     * The data needed to create a Jugador_backup.
     */
    data: XOR<Jugador_backupCreateInput, Jugador_backupUncheckedCreateInput>
  }

  /**
   * Jugador_backup createMany
   */
  export type Jugador_backupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jugador_backups.
     */
    data: Jugador_backupCreateManyInput | Jugador_backupCreateManyInput[]
  }

  /**
   * Jugador_backup update
   */
  export type Jugador_backupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador_backup
     */
    select?: Jugador_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Jugador_backupInclude<ExtArgs> | null
    /**
     * The data needed to update a Jugador_backup.
     */
    data: XOR<Jugador_backupUpdateInput, Jugador_backupUncheckedUpdateInput>
    /**
     * Choose, which Jugador_backup to update.
     */
    where: Jugador_backupWhereUniqueInput
  }

  /**
   * Jugador_backup updateMany
   */
  export type Jugador_backupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jugador_backups.
     */
    data: XOR<Jugador_backupUpdateManyMutationInput, Jugador_backupUncheckedUpdateManyInput>
    /**
     * Filter which Jugador_backups to update
     */
    where?: Jugador_backupWhereInput
  }

  /**
   * Jugador_backup upsert
   */
  export type Jugador_backupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador_backup
     */
    select?: Jugador_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Jugador_backupInclude<ExtArgs> | null
    /**
     * The filter to search for the Jugador_backup to update in case it exists.
     */
    where: Jugador_backupWhereUniqueInput
    /**
     * In case the Jugador_backup found by the `where` argument doesn't exist, create a new Jugador_backup with this data.
     */
    create: XOR<Jugador_backupCreateInput, Jugador_backupUncheckedCreateInput>
    /**
     * In case the Jugador_backup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Jugador_backupUpdateInput, Jugador_backupUncheckedUpdateInput>
  }

  /**
   * Jugador_backup delete
   */
  export type Jugador_backupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador_backup
     */
    select?: Jugador_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Jugador_backupInclude<ExtArgs> | null
    /**
     * Filter which Jugador_backup to delete.
     */
    where: Jugador_backupWhereUniqueInput
  }

  /**
   * Jugador_backup deleteMany
   */
  export type Jugador_backupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jugador_backups to delete
     */
    where?: Jugador_backupWhereInput
  }

  /**
   * Jugador_backup.Partida_backup_Partida_backup_idJugador1ToJugador_backup
   */
  export type Jugador_backup$Partida_backup_Partida_backup_idJugador1ToJugador_backupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida_backup
     */
    select?: Partida_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Partida_backupInclude<ExtArgs> | null
    where?: Partida_backupWhereInput
    orderBy?: Partida_backupOrderByWithRelationInput | Partida_backupOrderByWithRelationInput[]
    cursor?: Partida_backupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Partida_backupScalarFieldEnum | Partida_backupScalarFieldEnum[]
  }

  /**
   * Jugador_backup.Partida_backup_Partida_backup_idJugador2ToJugador_backup
   */
  export type Jugador_backup$Partida_backup_Partida_backup_idJugador2ToJugador_backupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida_backup
     */
    select?: Partida_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Partida_backupInclude<ExtArgs> | null
    where?: Partida_backupWhereInput
    orderBy?: Partida_backupOrderByWithRelationInput | Partida_backupOrderByWithRelationInput[]
    cursor?: Partida_backupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Partida_backupScalarFieldEnum | Partida_backupScalarFieldEnum[]
  }

  /**
   * Jugador_backup without action
   */
  export type Jugador_backupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jugador_backup
     */
    select?: Jugador_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Jugador_backupInclude<ExtArgs> | null
  }


  /**
   * Model Partida_backup
   */

  export type AggregatePartida_backup = {
    _count: Partida_backupCountAggregateOutputType | null
    _avg: Partida_backupAvgAggregateOutputType | null
    _sum: Partida_backupSumAggregateOutputType | null
    _min: Partida_backupMinAggregateOutputType | null
    _max: Partida_backupMaxAggregateOutputType | null
  }

  export type Partida_backupAvgAggregateOutputType = {
    idPartida: number | null
    idJugador1: number | null
    idJugador2: number | null
  }

  export type Partida_backupSumAggregateOutputType = {
    idPartida: number | null
    idJugador1: number | null
    idJugador2: number | null
  }

  export type Partida_backupMinAggregateOutputType = {
    idPartida: number | null
    idJugador1: number | null
    idJugador2: number | null
    estadoTablero: string | null
    historialMovimientos: string | null
    resultado: string | null
    fechaInicio: Date | null
  }

  export type Partida_backupMaxAggregateOutputType = {
    idPartida: number | null
    idJugador1: number | null
    idJugador2: number | null
    estadoTablero: string | null
    historialMovimientos: string | null
    resultado: string | null
    fechaInicio: Date | null
  }

  export type Partida_backupCountAggregateOutputType = {
    idPartida: number
    idJugador1: number
    idJugador2: number
    estadoTablero: number
    historialMovimientos: number
    resultado: number
    fechaInicio: number
    _all: number
  }


  export type Partida_backupAvgAggregateInputType = {
    idPartida?: true
    idJugador1?: true
    idJugador2?: true
  }

  export type Partida_backupSumAggregateInputType = {
    idPartida?: true
    idJugador1?: true
    idJugador2?: true
  }

  export type Partida_backupMinAggregateInputType = {
    idPartida?: true
    idJugador1?: true
    idJugador2?: true
    estadoTablero?: true
    historialMovimientos?: true
    resultado?: true
    fechaInicio?: true
  }

  export type Partida_backupMaxAggregateInputType = {
    idPartida?: true
    idJugador1?: true
    idJugador2?: true
    estadoTablero?: true
    historialMovimientos?: true
    resultado?: true
    fechaInicio?: true
  }

  export type Partida_backupCountAggregateInputType = {
    idPartida?: true
    idJugador1?: true
    idJugador2?: true
    estadoTablero?: true
    historialMovimientos?: true
    resultado?: true
    fechaInicio?: true
    _all?: true
  }

  export type Partida_backupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partida_backup to aggregate.
     */
    where?: Partida_backupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partida_backups to fetch.
     */
    orderBy?: Partida_backupOrderByWithRelationInput | Partida_backupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Partida_backupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partida_backups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partida_backups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Partida_backups
    **/
    _count?: true | Partida_backupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Partida_backupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Partida_backupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Partida_backupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Partida_backupMaxAggregateInputType
  }

  export type GetPartida_backupAggregateType<T extends Partida_backupAggregateArgs> = {
        [P in keyof T & keyof AggregatePartida_backup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartida_backup[P]>
      : GetScalarType<T[P], AggregatePartida_backup[P]>
  }




  export type Partida_backupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Partida_backupWhereInput
    orderBy?: Partida_backupOrderByWithAggregationInput | Partida_backupOrderByWithAggregationInput[]
    by: Partida_backupScalarFieldEnum[] | Partida_backupScalarFieldEnum
    having?: Partida_backupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Partida_backupCountAggregateInputType | true
    _avg?: Partida_backupAvgAggregateInputType
    _sum?: Partida_backupSumAggregateInputType
    _min?: Partida_backupMinAggregateInputType
    _max?: Partida_backupMaxAggregateInputType
  }

  export type Partida_backupGroupByOutputType = {
    idPartida: number
    idJugador1: number
    idJugador2: number
    estadoTablero: string
    historialMovimientos: string | null
    resultado: string | null
    fechaInicio: Date | null
    _count: Partida_backupCountAggregateOutputType | null
    _avg: Partida_backupAvgAggregateOutputType | null
    _sum: Partida_backupSumAggregateOutputType | null
    _min: Partida_backupMinAggregateOutputType | null
    _max: Partida_backupMaxAggregateOutputType | null
  }

  type GetPartida_backupGroupByPayload<T extends Partida_backupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Partida_backupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Partida_backupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Partida_backupGroupByOutputType[P]>
            : GetScalarType<T[P], Partida_backupGroupByOutputType[P]>
        }
      >
    >


  export type Partida_backupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idPartida?: boolean
    idJugador1?: boolean
    idJugador2?: boolean
    estadoTablero?: boolean
    historialMovimientos?: boolean
    resultado?: boolean
    fechaInicio?: boolean
    Jugador_backup_Partida_backup_idJugador1ToJugador_backup?: boolean | Jugador_backupDefaultArgs<ExtArgs>
    Jugador_backup_Partida_backup_idJugador2ToJugador_backup?: boolean | Jugador_backupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partida_backup"]>


  export type Partida_backupSelectScalar = {
    idPartida?: boolean
    idJugador1?: boolean
    idJugador2?: boolean
    estadoTablero?: boolean
    historialMovimientos?: boolean
    resultado?: boolean
    fechaInicio?: boolean
  }

  export type Partida_backupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Jugador_backup_Partida_backup_idJugador1ToJugador_backup?: boolean | Jugador_backupDefaultArgs<ExtArgs>
    Jugador_backup_Partida_backup_idJugador2ToJugador_backup?: boolean | Jugador_backupDefaultArgs<ExtArgs>
  }

  export type $Partida_backupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Partida_backup"
    objects: {
      Jugador_backup_Partida_backup_idJugador1ToJugador_backup: Prisma.$Jugador_backupPayload<ExtArgs>
      Jugador_backup_Partida_backup_idJugador2ToJugador_backup: Prisma.$Jugador_backupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idPartida: number
      idJugador1: number
      idJugador2: number
      estadoTablero: string
      historialMovimientos: string | null
      resultado: string | null
      fechaInicio: Date | null
    }, ExtArgs["result"]["partida_backup"]>
    composites: {}
  }

  type Partida_backupGetPayload<S extends boolean | null | undefined | Partida_backupDefaultArgs> = $Result.GetResult<Prisma.$Partida_backupPayload, S>

  type Partida_backupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Partida_backupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Partida_backupCountAggregateInputType | true
    }

  export interface Partida_backupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Partida_backup'], meta: { name: 'Partida_backup' } }
    /**
     * Find zero or one Partida_backup that matches the filter.
     * @param {Partida_backupFindUniqueArgs} args - Arguments to find a Partida_backup
     * @example
     * // Get one Partida_backup
     * const partida_backup = await prisma.partida_backup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Partida_backupFindUniqueArgs>(args: SelectSubset<T, Partida_backupFindUniqueArgs<ExtArgs>>): Prisma__Partida_backupClient<$Result.GetResult<Prisma.$Partida_backupPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Partida_backup that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {Partida_backupFindUniqueOrThrowArgs} args - Arguments to find a Partida_backup
     * @example
     * // Get one Partida_backup
     * const partida_backup = await prisma.partida_backup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Partida_backupFindUniqueOrThrowArgs>(args: SelectSubset<T, Partida_backupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Partida_backupClient<$Result.GetResult<Prisma.$Partida_backupPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Partida_backup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Partida_backupFindFirstArgs} args - Arguments to find a Partida_backup
     * @example
     * // Get one Partida_backup
     * const partida_backup = await prisma.partida_backup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Partida_backupFindFirstArgs>(args?: SelectSubset<T, Partida_backupFindFirstArgs<ExtArgs>>): Prisma__Partida_backupClient<$Result.GetResult<Prisma.$Partida_backupPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Partida_backup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Partida_backupFindFirstOrThrowArgs} args - Arguments to find a Partida_backup
     * @example
     * // Get one Partida_backup
     * const partida_backup = await prisma.partida_backup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Partida_backupFindFirstOrThrowArgs>(args?: SelectSubset<T, Partida_backupFindFirstOrThrowArgs<ExtArgs>>): Prisma__Partida_backupClient<$Result.GetResult<Prisma.$Partida_backupPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Partida_backups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Partida_backupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partida_backups
     * const partida_backups = await prisma.partida_backup.findMany()
     * 
     * // Get first 10 Partida_backups
     * const partida_backups = await prisma.partida_backup.findMany({ take: 10 })
     * 
     * // Only select the `idPartida`
     * const partida_backupWithIdPartidaOnly = await prisma.partida_backup.findMany({ select: { idPartida: true } })
     * 
     */
    findMany<T extends Partida_backupFindManyArgs>(args?: SelectSubset<T, Partida_backupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Partida_backupPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Partida_backup.
     * @param {Partida_backupCreateArgs} args - Arguments to create a Partida_backup.
     * @example
     * // Create one Partida_backup
     * const Partida_backup = await prisma.partida_backup.create({
     *   data: {
     *     // ... data to create a Partida_backup
     *   }
     * })
     * 
     */
    create<T extends Partida_backupCreateArgs>(args: SelectSubset<T, Partida_backupCreateArgs<ExtArgs>>): Prisma__Partida_backupClient<$Result.GetResult<Prisma.$Partida_backupPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Partida_backups.
     * @param {Partida_backupCreateManyArgs} args - Arguments to create many Partida_backups.
     * @example
     * // Create many Partida_backups
     * const partida_backup = await prisma.partida_backup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Partida_backupCreateManyArgs>(args?: SelectSubset<T, Partida_backupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Partida_backup.
     * @param {Partida_backupDeleteArgs} args - Arguments to delete one Partida_backup.
     * @example
     * // Delete one Partida_backup
     * const Partida_backup = await prisma.partida_backup.delete({
     *   where: {
     *     // ... filter to delete one Partida_backup
     *   }
     * })
     * 
     */
    delete<T extends Partida_backupDeleteArgs>(args: SelectSubset<T, Partida_backupDeleteArgs<ExtArgs>>): Prisma__Partida_backupClient<$Result.GetResult<Prisma.$Partida_backupPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Partida_backup.
     * @param {Partida_backupUpdateArgs} args - Arguments to update one Partida_backup.
     * @example
     * // Update one Partida_backup
     * const partida_backup = await prisma.partida_backup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Partida_backupUpdateArgs>(args: SelectSubset<T, Partida_backupUpdateArgs<ExtArgs>>): Prisma__Partida_backupClient<$Result.GetResult<Prisma.$Partida_backupPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Partida_backups.
     * @param {Partida_backupDeleteManyArgs} args - Arguments to filter Partida_backups to delete.
     * @example
     * // Delete a few Partida_backups
     * const { count } = await prisma.partida_backup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Partida_backupDeleteManyArgs>(args?: SelectSubset<T, Partida_backupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partida_backups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Partida_backupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partida_backups
     * const partida_backup = await prisma.partida_backup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Partida_backupUpdateManyArgs>(args: SelectSubset<T, Partida_backupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Partida_backup.
     * @param {Partida_backupUpsertArgs} args - Arguments to update or create a Partida_backup.
     * @example
     * // Update or create a Partida_backup
     * const partida_backup = await prisma.partida_backup.upsert({
     *   create: {
     *     // ... data to create a Partida_backup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partida_backup we want to update
     *   }
     * })
     */
    upsert<T extends Partida_backupUpsertArgs>(args: SelectSubset<T, Partida_backupUpsertArgs<ExtArgs>>): Prisma__Partida_backupClient<$Result.GetResult<Prisma.$Partida_backupPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Partida_backups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Partida_backupCountArgs} args - Arguments to filter Partida_backups to count.
     * @example
     * // Count the number of Partida_backups
     * const count = await prisma.partida_backup.count({
     *   where: {
     *     // ... the filter for the Partida_backups we want to count
     *   }
     * })
    **/
    count<T extends Partida_backupCountArgs>(
      args?: Subset<T, Partida_backupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Partida_backupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partida_backup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Partida_backupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Partida_backupAggregateArgs>(args: Subset<T, Partida_backupAggregateArgs>): Prisma.PrismaPromise<GetPartida_backupAggregateType<T>>

    /**
     * Group by Partida_backup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Partida_backupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Partida_backupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Partida_backupGroupByArgs['orderBy'] }
        : { orderBy?: Partida_backupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Partida_backupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartida_backupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Partida_backup model
   */
  readonly fields: Partida_backupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Partida_backup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Partida_backupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Jugador_backup_Partida_backup_idJugador1ToJugador_backup<T extends Jugador_backupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Jugador_backupDefaultArgs<ExtArgs>>): Prisma__Jugador_backupClient<$Result.GetResult<Prisma.$Jugador_backupPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Jugador_backup_Partida_backup_idJugador2ToJugador_backup<T extends Jugador_backupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Jugador_backupDefaultArgs<ExtArgs>>): Prisma__Jugador_backupClient<$Result.GetResult<Prisma.$Jugador_backupPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Partida_backup model
   */ 
  interface Partida_backupFieldRefs {
    readonly idPartida: FieldRef<"Partida_backup", 'Int'>
    readonly idJugador1: FieldRef<"Partida_backup", 'Int'>
    readonly idJugador2: FieldRef<"Partida_backup", 'Int'>
    readonly estadoTablero: FieldRef<"Partida_backup", 'String'>
    readonly historialMovimientos: FieldRef<"Partida_backup", 'String'>
    readonly resultado: FieldRef<"Partida_backup", 'String'>
    readonly fechaInicio: FieldRef<"Partida_backup", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Partida_backup findUnique
   */
  export type Partida_backupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida_backup
     */
    select?: Partida_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Partida_backupInclude<ExtArgs> | null
    /**
     * Filter, which Partida_backup to fetch.
     */
    where: Partida_backupWhereUniqueInput
  }

  /**
   * Partida_backup findUniqueOrThrow
   */
  export type Partida_backupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida_backup
     */
    select?: Partida_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Partida_backupInclude<ExtArgs> | null
    /**
     * Filter, which Partida_backup to fetch.
     */
    where: Partida_backupWhereUniqueInput
  }

  /**
   * Partida_backup findFirst
   */
  export type Partida_backupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida_backup
     */
    select?: Partida_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Partida_backupInclude<ExtArgs> | null
    /**
     * Filter, which Partida_backup to fetch.
     */
    where?: Partida_backupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partida_backups to fetch.
     */
    orderBy?: Partida_backupOrderByWithRelationInput | Partida_backupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partida_backups.
     */
    cursor?: Partida_backupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partida_backups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partida_backups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partida_backups.
     */
    distinct?: Partida_backupScalarFieldEnum | Partida_backupScalarFieldEnum[]
  }

  /**
   * Partida_backup findFirstOrThrow
   */
  export type Partida_backupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida_backup
     */
    select?: Partida_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Partida_backupInclude<ExtArgs> | null
    /**
     * Filter, which Partida_backup to fetch.
     */
    where?: Partida_backupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partida_backups to fetch.
     */
    orderBy?: Partida_backupOrderByWithRelationInput | Partida_backupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partida_backups.
     */
    cursor?: Partida_backupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partida_backups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partida_backups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partida_backups.
     */
    distinct?: Partida_backupScalarFieldEnum | Partida_backupScalarFieldEnum[]
  }

  /**
   * Partida_backup findMany
   */
  export type Partida_backupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida_backup
     */
    select?: Partida_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Partida_backupInclude<ExtArgs> | null
    /**
     * Filter, which Partida_backups to fetch.
     */
    where?: Partida_backupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partida_backups to fetch.
     */
    orderBy?: Partida_backupOrderByWithRelationInput | Partida_backupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Partida_backups.
     */
    cursor?: Partida_backupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partida_backups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partida_backups.
     */
    skip?: number
    distinct?: Partida_backupScalarFieldEnum | Partida_backupScalarFieldEnum[]
  }

  /**
   * Partida_backup create
   */
  export type Partida_backupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida_backup
     */
    select?: Partida_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Partida_backupInclude<ExtArgs> | null
    /**
     * The data needed to create a Partida_backup.
     */
    data: XOR<Partida_backupCreateInput, Partida_backupUncheckedCreateInput>
  }

  /**
   * Partida_backup createMany
   */
  export type Partida_backupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Partida_backups.
     */
    data: Partida_backupCreateManyInput | Partida_backupCreateManyInput[]
  }

  /**
   * Partida_backup update
   */
  export type Partida_backupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida_backup
     */
    select?: Partida_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Partida_backupInclude<ExtArgs> | null
    /**
     * The data needed to update a Partida_backup.
     */
    data: XOR<Partida_backupUpdateInput, Partida_backupUncheckedUpdateInput>
    /**
     * Choose, which Partida_backup to update.
     */
    where: Partida_backupWhereUniqueInput
  }

  /**
   * Partida_backup updateMany
   */
  export type Partida_backupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Partida_backups.
     */
    data: XOR<Partida_backupUpdateManyMutationInput, Partida_backupUncheckedUpdateManyInput>
    /**
     * Filter which Partida_backups to update
     */
    where?: Partida_backupWhereInput
  }

  /**
   * Partida_backup upsert
   */
  export type Partida_backupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida_backup
     */
    select?: Partida_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Partida_backupInclude<ExtArgs> | null
    /**
     * The filter to search for the Partida_backup to update in case it exists.
     */
    where: Partida_backupWhereUniqueInput
    /**
     * In case the Partida_backup found by the `where` argument doesn't exist, create a new Partida_backup with this data.
     */
    create: XOR<Partida_backupCreateInput, Partida_backupUncheckedCreateInput>
    /**
     * In case the Partida_backup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Partida_backupUpdateInput, Partida_backupUncheckedUpdateInput>
  }

  /**
   * Partida_backup delete
   */
  export type Partida_backupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida_backup
     */
    select?: Partida_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Partida_backupInclude<ExtArgs> | null
    /**
     * Filter which Partida_backup to delete.
     */
    where: Partida_backupWhereUniqueInput
  }

  /**
   * Partida_backup deleteMany
   */
  export type Partida_backupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partida_backups to delete
     */
    where?: Partida_backupWhereInput
  }

  /**
   * Partida_backup without action
   */
  export type Partida_backupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partida_backup
     */
    select?: Partida_backupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Partida_backupInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const JugadorScalarFieldEnum: {
    id: 'id',
    identificacion: 'identificacion',
    nombre: 'nombre',
    partidasGanadas: 'partidasGanadas',
    partidasPerdidas: 'partidasPerdidas',
    partidasEmpatadas: 'partidasEmpatadas',
    marcador: 'marcador',
    fechaCreacion: 'fechaCreacion',
    fechaActualizacion: 'fechaActualizacion'
  };

  export type JugadorScalarFieldEnum = (typeof JugadorScalarFieldEnum)[keyof typeof JugadorScalarFieldEnum]


  export const PartidaScalarFieldEnum: {
    id: 'id',
    jugador1Id: 'jugador1Id',
    jugador2Id: 'jugador2Id',
    estado: 'estado',
    ganadorId: 'ganadorId',
    resultado: 'resultado',
    tablero: 'tablero',
    turnoActual: 'turnoActual',
    fechaCreacion: 'fechaCreacion',
    fechaActualizacion: 'fechaActualizacion'
  };

  export type PartidaScalarFieldEnum = (typeof PartidaScalarFieldEnum)[keyof typeof PartidaScalarFieldEnum]


  export const MovimientoScalarFieldEnum: {
    id: 'id',
    partidaId: 'partidaId',
    jugadorId: 'jugadorId',
    columnaLetra: 'columnaLetra',
    filaPosicion: 'filaPosicion',
    numeroMovimiento: 'numeroMovimiento',
    fechaCreacion: 'fechaCreacion'
  };

  export type MovimientoScalarFieldEnum = (typeof MovimientoScalarFieldEnum)[keyof typeof MovimientoScalarFieldEnum]


  export const Jugador_backupScalarFieldEnum: {
    idJugador: 'idJugador',
    nombre: 'nombre',
    marcador: 'marcador'
  };

  export type Jugador_backupScalarFieldEnum = (typeof Jugador_backupScalarFieldEnum)[keyof typeof Jugador_backupScalarFieldEnum]


  export const Partida_backupScalarFieldEnum: {
    idPartida: 'idPartida',
    idJugador1: 'idJugador1',
    idJugador2: 'idJugador2',
    estadoTablero: 'estadoTablero',
    historialMovimientos: 'historialMovimientos',
    resultado: 'resultado',
    fechaInicio: 'fechaInicio'
  };

  export type Partida_backupScalarFieldEnum = (typeof Partida_backupScalarFieldEnum)[keyof typeof Partida_backupScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type JugadorWhereInput = {
    AND?: JugadorWhereInput | JugadorWhereInput[]
    OR?: JugadorWhereInput[]
    NOT?: JugadorWhereInput | JugadorWhereInput[]
    id?: IntFilter<"Jugador"> | number
    identificacion?: BigIntFilter<"Jugador"> | bigint | number
    nombre?: StringFilter<"Jugador"> | string
    partidasGanadas?: IntFilter<"Jugador"> | number
    partidasPerdidas?: IntFilter<"Jugador"> | number
    partidasEmpatadas?: IntFilter<"Jugador"> | number
    marcador?: IntFilter<"Jugador"> | number
    fechaCreacion?: DateTimeFilter<"Jugador"> | Date | string
    fechaActualizacion?: DateTimeFilter<"Jugador"> | Date | string
    movimientos?: MovimientoListRelationFilter
    partidasGanador?: PartidaListRelationFilter
    partidasComoJugador1?: PartidaListRelationFilter
    partidasComoJugador2?: PartidaListRelationFilter
  }

  export type JugadorOrderByWithRelationInput = {
    id?: SortOrder
    identificacion?: SortOrder
    nombre?: SortOrder
    partidasGanadas?: SortOrder
    partidasPerdidas?: SortOrder
    partidasEmpatadas?: SortOrder
    marcador?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    movimientos?: MovimientoOrderByRelationAggregateInput
    partidasGanador?: PartidaOrderByRelationAggregateInput
    partidasComoJugador1?: PartidaOrderByRelationAggregateInput
    partidasComoJugador2?: PartidaOrderByRelationAggregateInput
  }

  export type JugadorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    identificacion?: bigint | number
    AND?: JugadorWhereInput | JugadorWhereInput[]
    OR?: JugadorWhereInput[]
    NOT?: JugadorWhereInput | JugadorWhereInput[]
    nombre?: StringFilter<"Jugador"> | string
    partidasGanadas?: IntFilter<"Jugador"> | number
    partidasPerdidas?: IntFilter<"Jugador"> | number
    partidasEmpatadas?: IntFilter<"Jugador"> | number
    marcador?: IntFilter<"Jugador"> | number
    fechaCreacion?: DateTimeFilter<"Jugador"> | Date | string
    fechaActualizacion?: DateTimeFilter<"Jugador"> | Date | string
    movimientos?: MovimientoListRelationFilter
    partidasGanador?: PartidaListRelationFilter
    partidasComoJugador1?: PartidaListRelationFilter
    partidasComoJugador2?: PartidaListRelationFilter
  }, "id" | "identificacion">

  export type JugadorOrderByWithAggregationInput = {
    id?: SortOrder
    identificacion?: SortOrder
    nombre?: SortOrder
    partidasGanadas?: SortOrder
    partidasPerdidas?: SortOrder
    partidasEmpatadas?: SortOrder
    marcador?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    _count?: JugadorCountOrderByAggregateInput
    _avg?: JugadorAvgOrderByAggregateInput
    _max?: JugadorMaxOrderByAggregateInput
    _min?: JugadorMinOrderByAggregateInput
    _sum?: JugadorSumOrderByAggregateInput
  }

  export type JugadorScalarWhereWithAggregatesInput = {
    AND?: JugadorScalarWhereWithAggregatesInput | JugadorScalarWhereWithAggregatesInput[]
    OR?: JugadorScalarWhereWithAggregatesInput[]
    NOT?: JugadorScalarWhereWithAggregatesInput | JugadorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Jugador"> | number
    identificacion?: BigIntWithAggregatesFilter<"Jugador"> | bigint | number
    nombre?: StringWithAggregatesFilter<"Jugador"> | string
    partidasGanadas?: IntWithAggregatesFilter<"Jugador"> | number
    partidasPerdidas?: IntWithAggregatesFilter<"Jugador"> | number
    partidasEmpatadas?: IntWithAggregatesFilter<"Jugador"> | number
    marcador?: IntWithAggregatesFilter<"Jugador"> | number
    fechaCreacion?: DateTimeWithAggregatesFilter<"Jugador"> | Date | string
    fechaActualizacion?: DateTimeWithAggregatesFilter<"Jugador"> | Date | string
  }

  export type PartidaWhereInput = {
    AND?: PartidaWhereInput | PartidaWhereInput[]
    OR?: PartidaWhereInput[]
    NOT?: PartidaWhereInput | PartidaWhereInput[]
    id?: IntFilter<"Partida"> | number
    jugador1Id?: IntFilter<"Partida"> | number
    jugador2Id?: IntFilter<"Partida"> | number
    estado?: StringFilter<"Partida"> | string
    ganadorId?: IntNullableFilter<"Partida"> | number | null
    resultado?: StringNullableFilter<"Partida"> | string | null
    tablero?: StringFilter<"Partida"> | string
    turnoActual?: IntFilter<"Partida"> | number
    fechaCreacion?: DateTimeFilter<"Partida"> | Date | string
    fechaActualizacion?: DateTimeFilter<"Partida"> | Date | string
    movimientos?: MovimientoListRelationFilter
    ganador?: XOR<JugadorNullableRelationFilter, JugadorWhereInput> | null
    jugador1?: XOR<JugadorRelationFilter, JugadorWhereInput>
    jugador2?: XOR<JugadorRelationFilter, JugadorWhereInput>
  }

  export type PartidaOrderByWithRelationInput = {
    id?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    estado?: SortOrder
    ganadorId?: SortOrderInput | SortOrder
    resultado?: SortOrderInput | SortOrder
    tablero?: SortOrder
    turnoActual?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    movimientos?: MovimientoOrderByRelationAggregateInput
    ganador?: JugadorOrderByWithRelationInput
    jugador1?: JugadorOrderByWithRelationInput
    jugador2?: JugadorOrderByWithRelationInput
  }

  export type PartidaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PartidaWhereInput | PartidaWhereInput[]
    OR?: PartidaWhereInput[]
    NOT?: PartidaWhereInput | PartidaWhereInput[]
    jugador1Id?: IntFilter<"Partida"> | number
    jugador2Id?: IntFilter<"Partida"> | number
    estado?: StringFilter<"Partida"> | string
    ganadorId?: IntNullableFilter<"Partida"> | number | null
    resultado?: StringNullableFilter<"Partida"> | string | null
    tablero?: StringFilter<"Partida"> | string
    turnoActual?: IntFilter<"Partida"> | number
    fechaCreacion?: DateTimeFilter<"Partida"> | Date | string
    fechaActualizacion?: DateTimeFilter<"Partida"> | Date | string
    movimientos?: MovimientoListRelationFilter
    ganador?: XOR<JugadorNullableRelationFilter, JugadorWhereInput> | null
    jugador1?: XOR<JugadorRelationFilter, JugadorWhereInput>
    jugador2?: XOR<JugadorRelationFilter, JugadorWhereInput>
  }, "id">

  export type PartidaOrderByWithAggregationInput = {
    id?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    estado?: SortOrder
    ganadorId?: SortOrderInput | SortOrder
    resultado?: SortOrderInput | SortOrder
    tablero?: SortOrder
    turnoActual?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    _count?: PartidaCountOrderByAggregateInput
    _avg?: PartidaAvgOrderByAggregateInput
    _max?: PartidaMaxOrderByAggregateInput
    _min?: PartidaMinOrderByAggregateInput
    _sum?: PartidaSumOrderByAggregateInput
  }

  export type PartidaScalarWhereWithAggregatesInput = {
    AND?: PartidaScalarWhereWithAggregatesInput | PartidaScalarWhereWithAggregatesInput[]
    OR?: PartidaScalarWhereWithAggregatesInput[]
    NOT?: PartidaScalarWhereWithAggregatesInput | PartidaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Partida"> | number
    jugador1Id?: IntWithAggregatesFilter<"Partida"> | number
    jugador2Id?: IntWithAggregatesFilter<"Partida"> | number
    estado?: StringWithAggregatesFilter<"Partida"> | string
    ganadorId?: IntNullableWithAggregatesFilter<"Partida"> | number | null
    resultado?: StringNullableWithAggregatesFilter<"Partida"> | string | null
    tablero?: StringWithAggregatesFilter<"Partida"> | string
    turnoActual?: IntWithAggregatesFilter<"Partida"> | number
    fechaCreacion?: DateTimeWithAggregatesFilter<"Partida"> | Date | string
    fechaActualizacion?: DateTimeWithAggregatesFilter<"Partida"> | Date | string
  }

  export type MovimientoWhereInput = {
    AND?: MovimientoWhereInput | MovimientoWhereInput[]
    OR?: MovimientoWhereInput[]
    NOT?: MovimientoWhereInput | MovimientoWhereInput[]
    id?: IntFilter<"Movimiento"> | number
    partidaId?: IntFilter<"Movimiento"> | number
    jugadorId?: IntFilter<"Movimiento"> | number
    columnaLetra?: StringFilter<"Movimiento"> | string
    filaPosicion?: IntFilter<"Movimiento"> | number
    numeroMovimiento?: IntFilter<"Movimiento"> | number
    fechaCreacion?: DateTimeFilter<"Movimiento"> | Date | string
    jugador?: XOR<JugadorRelationFilter, JugadorWhereInput>
    partida?: XOR<PartidaRelationFilter, PartidaWhereInput>
  }

  export type MovimientoOrderByWithRelationInput = {
    id?: SortOrder
    partidaId?: SortOrder
    jugadorId?: SortOrder
    columnaLetra?: SortOrder
    filaPosicion?: SortOrder
    numeroMovimiento?: SortOrder
    fechaCreacion?: SortOrder
    jugador?: JugadorOrderByWithRelationInput
    partida?: PartidaOrderByWithRelationInput
  }

  export type MovimientoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MovimientoWhereInput | MovimientoWhereInput[]
    OR?: MovimientoWhereInput[]
    NOT?: MovimientoWhereInput | MovimientoWhereInput[]
    partidaId?: IntFilter<"Movimiento"> | number
    jugadorId?: IntFilter<"Movimiento"> | number
    columnaLetra?: StringFilter<"Movimiento"> | string
    filaPosicion?: IntFilter<"Movimiento"> | number
    numeroMovimiento?: IntFilter<"Movimiento"> | number
    fechaCreacion?: DateTimeFilter<"Movimiento"> | Date | string
    jugador?: XOR<JugadorRelationFilter, JugadorWhereInput>
    partida?: XOR<PartidaRelationFilter, PartidaWhereInput>
  }, "id">

  export type MovimientoOrderByWithAggregationInput = {
    id?: SortOrder
    partidaId?: SortOrder
    jugadorId?: SortOrder
    columnaLetra?: SortOrder
    filaPosicion?: SortOrder
    numeroMovimiento?: SortOrder
    fechaCreacion?: SortOrder
    _count?: MovimientoCountOrderByAggregateInput
    _avg?: MovimientoAvgOrderByAggregateInput
    _max?: MovimientoMaxOrderByAggregateInput
    _min?: MovimientoMinOrderByAggregateInput
    _sum?: MovimientoSumOrderByAggregateInput
  }

  export type MovimientoScalarWhereWithAggregatesInput = {
    AND?: MovimientoScalarWhereWithAggregatesInput | MovimientoScalarWhereWithAggregatesInput[]
    OR?: MovimientoScalarWhereWithAggregatesInput[]
    NOT?: MovimientoScalarWhereWithAggregatesInput | MovimientoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Movimiento"> | number
    partidaId?: IntWithAggregatesFilter<"Movimiento"> | number
    jugadorId?: IntWithAggregatesFilter<"Movimiento"> | number
    columnaLetra?: StringWithAggregatesFilter<"Movimiento"> | string
    filaPosicion?: IntWithAggregatesFilter<"Movimiento"> | number
    numeroMovimiento?: IntWithAggregatesFilter<"Movimiento"> | number
    fechaCreacion?: DateTimeWithAggregatesFilter<"Movimiento"> | Date | string
  }

  export type Jugador_backupWhereInput = {
    AND?: Jugador_backupWhereInput | Jugador_backupWhereInput[]
    OR?: Jugador_backupWhereInput[]
    NOT?: Jugador_backupWhereInput | Jugador_backupWhereInput[]
    idJugador?: IntFilter<"Jugador_backup"> | number
    nombre?: StringFilter<"Jugador_backup"> | string
    marcador?: IntFilter<"Jugador_backup"> | number
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: Partida_backupListRelationFilter
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: Partida_backupListRelationFilter
  }

  export type Jugador_backupOrderByWithRelationInput = {
    idJugador?: SortOrder
    nombre?: SortOrder
    marcador?: SortOrder
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: Partida_backupOrderByRelationAggregateInput
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: Partida_backupOrderByRelationAggregateInput
  }

  export type Jugador_backupWhereUniqueInput = Prisma.AtLeast<{
    idJugador?: number
    AND?: Jugador_backupWhereInput | Jugador_backupWhereInput[]
    OR?: Jugador_backupWhereInput[]
    NOT?: Jugador_backupWhereInput | Jugador_backupWhereInput[]
    nombre?: StringFilter<"Jugador_backup"> | string
    marcador?: IntFilter<"Jugador_backup"> | number
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: Partida_backupListRelationFilter
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: Partida_backupListRelationFilter
  }, "idJugador">

  export type Jugador_backupOrderByWithAggregationInput = {
    idJugador?: SortOrder
    nombre?: SortOrder
    marcador?: SortOrder
    _count?: Jugador_backupCountOrderByAggregateInput
    _avg?: Jugador_backupAvgOrderByAggregateInput
    _max?: Jugador_backupMaxOrderByAggregateInput
    _min?: Jugador_backupMinOrderByAggregateInput
    _sum?: Jugador_backupSumOrderByAggregateInput
  }

  export type Jugador_backupScalarWhereWithAggregatesInput = {
    AND?: Jugador_backupScalarWhereWithAggregatesInput | Jugador_backupScalarWhereWithAggregatesInput[]
    OR?: Jugador_backupScalarWhereWithAggregatesInput[]
    NOT?: Jugador_backupScalarWhereWithAggregatesInput | Jugador_backupScalarWhereWithAggregatesInput[]
    idJugador?: IntWithAggregatesFilter<"Jugador_backup"> | number
    nombre?: StringWithAggregatesFilter<"Jugador_backup"> | string
    marcador?: IntWithAggregatesFilter<"Jugador_backup"> | number
  }

  export type Partida_backupWhereInput = {
    AND?: Partida_backupWhereInput | Partida_backupWhereInput[]
    OR?: Partida_backupWhereInput[]
    NOT?: Partida_backupWhereInput | Partida_backupWhereInput[]
    idPartida?: IntFilter<"Partida_backup"> | number
    idJugador1?: IntFilter<"Partida_backup"> | number
    idJugador2?: IntFilter<"Partida_backup"> | number
    estadoTablero?: StringFilter<"Partida_backup"> | string
    historialMovimientos?: StringNullableFilter<"Partida_backup"> | string | null
    resultado?: StringNullableFilter<"Partida_backup"> | string | null
    fechaInicio?: DateTimeNullableFilter<"Partida_backup"> | Date | string | null
    Jugador_backup_Partida_backup_idJugador1ToJugador_backup?: XOR<Jugador_backupRelationFilter, Jugador_backupWhereInput>
    Jugador_backup_Partida_backup_idJugador2ToJugador_backup?: XOR<Jugador_backupRelationFilter, Jugador_backupWhereInput>
  }

  export type Partida_backupOrderByWithRelationInput = {
    idPartida?: SortOrder
    idJugador1?: SortOrder
    idJugador2?: SortOrder
    estadoTablero?: SortOrder
    historialMovimientos?: SortOrderInput | SortOrder
    resultado?: SortOrderInput | SortOrder
    fechaInicio?: SortOrderInput | SortOrder
    Jugador_backup_Partida_backup_idJugador1ToJugador_backup?: Jugador_backupOrderByWithRelationInput
    Jugador_backup_Partida_backup_idJugador2ToJugador_backup?: Jugador_backupOrderByWithRelationInput
  }

  export type Partida_backupWhereUniqueInput = Prisma.AtLeast<{
    idPartida?: number
    AND?: Partida_backupWhereInput | Partida_backupWhereInput[]
    OR?: Partida_backupWhereInput[]
    NOT?: Partida_backupWhereInput | Partida_backupWhereInput[]
    idJugador1?: IntFilter<"Partida_backup"> | number
    idJugador2?: IntFilter<"Partida_backup"> | number
    estadoTablero?: StringFilter<"Partida_backup"> | string
    historialMovimientos?: StringNullableFilter<"Partida_backup"> | string | null
    resultado?: StringNullableFilter<"Partida_backup"> | string | null
    fechaInicio?: DateTimeNullableFilter<"Partida_backup"> | Date | string | null
    Jugador_backup_Partida_backup_idJugador1ToJugador_backup?: XOR<Jugador_backupRelationFilter, Jugador_backupWhereInput>
    Jugador_backup_Partida_backup_idJugador2ToJugador_backup?: XOR<Jugador_backupRelationFilter, Jugador_backupWhereInput>
  }, "idPartida">

  export type Partida_backupOrderByWithAggregationInput = {
    idPartida?: SortOrder
    idJugador1?: SortOrder
    idJugador2?: SortOrder
    estadoTablero?: SortOrder
    historialMovimientos?: SortOrderInput | SortOrder
    resultado?: SortOrderInput | SortOrder
    fechaInicio?: SortOrderInput | SortOrder
    _count?: Partida_backupCountOrderByAggregateInput
    _avg?: Partida_backupAvgOrderByAggregateInput
    _max?: Partida_backupMaxOrderByAggregateInput
    _min?: Partida_backupMinOrderByAggregateInput
    _sum?: Partida_backupSumOrderByAggregateInput
  }

  export type Partida_backupScalarWhereWithAggregatesInput = {
    AND?: Partida_backupScalarWhereWithAggregatesInput | Partida_backupScalarWhereWithAggregatesInput[]
    OR?: Partida_backupScalarWhereWithAggregatesInput[]
    NOT?: Partida_backupScalarWhereWithAggregatesInput | Partida_backupScalarWhereWithAggregatesInput[]
    idPartida?: IntWithAggregatesFilter<"Partida_backup"> | number
    idJugador1?: IntWithAggregatesFilter<"Partida_backup"> | number
    idJugador2?: IntWithAggregatesFilter<"Partida_backup"> | number
    estadoTablero?: StringWithAggregatesFilter<"Partida_backup"> | string
    historialMovimientos?: StringNullableWithAggregatesFilter<"Partida_backup"> | string | null
    resultado?: StringNullableWithAggregatesFilter<"Partida_backup"> | string | null
    fechaInicio?: DateTimeNullableWithAggregatesFilter<"Partida_backup"> | Date | string | null
  }

  export type JugadorCreateInput = {
    identificacion: bigint | number
    nombre: string
    partidasGanadas?: number
    partidasPerdidas?: number
    partidasEmpatadas?: number
    marcador?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoCreateNestedManyWithoutJugadorInput
    partidasGanador?: PartidaCreateNestedManyWithoutGanadorInput
    partidasComoJugador1?: PartidaCreateNestedManyWithoutJugador1Input
    partidasComoJugador2?: PartidaCreateNestedManyWithoutJugador2Input
  }

  export type JugadorUncheckedCreateInput = {
    id?: number
    identificacion: bigint | number
    nombre: string
    partidasGanadas?: number
    partidasPerdidas?: number
    partidasEmpatadas?: number
    marcador?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoUncheckedCreateNestedManyWithoutJugadorInput
    partidasGanador?: PartidaUncheckedCreateNestedManyWithoutGanadorInput
    partidasComoJugador1?: PartidaUncheckedCreateNestedManyWithoutJugador1Input
    partidasComoJugador2?: PartidaUncheckedCreateNestedManyWithoutJugador2Input
  }

  export type JugadorUpdateInput = {
    identificacion?: BigIntFieldUpdateOperationsInput | bigint | number
    nombre?: StringFieldUpdateOperationsInput | string
    partidasGanadas?: IntFieldUpdateOperationsInput | number
    partidasPerdidas?: IntFieldUpdateOperationsInput | number
    partidasEmpatadas?: IntFieldUpdateOperationsInput | number
    marcador?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUpdateManyWithoutJugadorNestedInput
    partidasGanador?: PartidaUpdateManyWithoutGanadorNestedInput
    partidasComoJugador1?: PartidaUpdateManyWithoutJugador1NestedInput
    partidasComoJugador2?: PartidaUpdateManyWithoutJugador2NestedInput
  }

  export type JugadorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    identificacion?: BigIntFieldUpdateOperationsInput | bigint | number
    nombre?: StringFieldUpdateOperationsInput | string
    partidasGanadas?: IntFieldUpdateOperationsInput | number
    partidasPerdidas?: IntFieldUpdateOperationsInput | number
    partidasEmpatadas?: IntFieldUpdateOperationsInput | number
    marcador?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUncheckedUpdateManyWithoutJugadorNestedInput
    partidasGanador?: PartidaUncheckedUpdateManyWithoutGanadorNestedInput
    partidasComoJugador1?: PartidaUncheckedUpdateManyWithoutJugador1NestedInput
    partidasComoJugador2?: PartidaUncheckedUpdateManyWithoutJugador2NestedInput
  }

  export type JugadorCreateManyInput = {
    identificacion: bigint | number
    nombre: string
    partidasGanadas?: number
    partidasPerdidas?: number
    partidasEmpatadas?: number
    marcador?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type JugadorUpdateManyMutationInput = {
    identificacion?: BigIntFieldUpdateOperationsInput | bigint | number
    nombre?: StringFieldUpdateOperationsInput | string
    partidasGanadas?: IntFieldUpdateOperationsInput | number
    partidasPerdidas?: IntFieldUpdateOperationsInput | number
    partidasEmpatadas?: IntFieldUpdateOperationsInput | number
    marcador?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JugadorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    identificacion?: BigIntFieldUpdateOperationsInput | bigint | number
    nombre?: StringFieldUpdateOperationsInput | string
    partidasGanadas?: IntFieldUpdateOperationsInput | number
    partidasPerdidas?: IntFieldUpdateOperationsInput | number
    partidasEmpatadas?: IntFieldUpdateOperationsInput | number
    marcador?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartidaCreateInput = {
    estado?: string
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoCreateNestedManyWithoutPartidaInput
    ganador?: JugadorCreateNestedOneWithoutPartidasGanadorInput
    jugador1: JugadorCreateNestedOneWithoutPartidasComoJugador1Input
    jugador2: JugadorCreateNestedOneWithoutPartidasComoJugador2Input
  }

  export type PartidaUncheckedCreateInput = {
    id?: number
    jugador1Id: number
    jugador2Id: number
    estado?: string
    ganadorId?: number | null
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoUncheckedCreateNestedManyWithoutPartidaInput
  }

  export type PartidaUpdateInput = {
    estado?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUpdateManyWithoutPartidaNestedInput
    ganador?: JugadorUpdateOneWithoutPartidasGanadorNestedInput
    jugador1?: JugadorUpdateOneRequiredWithoutPartidasComoJugador1NestedInput
    jugador2?: JugadorUpdateOneRequiredWithoutPartidasComoJugador2NestedInput
  }

  export type PartidaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUncheckedUpdateManyWithoutPartidaNestedInput
  }

  export type PartidaCreateManyInput = {
    jugador1Id: number
    jugador2Id: number
    estado?: string
    ganadorId?: number | null
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type PartidaUpdateManyMutationInput = {
    estado?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartidaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovimientoCreateInput = {
    columnaLetra: string
    filaPosicion: number
    numeroMovimiento: number
    fechaCreacion?: Date | string
    jugador: JugadorCreateNestedOneWithoutMovimientosInput
    partida: PartidaCreateNestedOneWithoutMovimientosInput
  }

  export type MovimientoUncheckedCreateInput = {
    id?: number
    partidaId: number
    jugadorId: number
    columnaLetra: string
    filaPosicion: number
    numeroMovimiento: number
    fechaCreacion?: Date | string
  }

  export type MovimientoUpdateInput = {
    columnaLetra?: StringFieldUpdateOperationsInput | string
    filaPosicion?: IntFieldUpdateOperationsInput | number
    numeroMovimiento?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    jugador?: JugadorUpdateOneRequiredWithoutMovimientosNestedInput
    partida?: PartidaUpdateOneRequiredWithoutMovimientosNestedInput
  }

  export type MovimientoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    partidaId?: IntFieldUpdateOperationsInput | number
    jugadorId?: IntFieldUpdateOperationsInput | number
    columnaLetra?: StringFieldUpdateOperationsInput | string
    filaPosicion?: IntFieldUpdateOperationsInput | number
    numeroMovimiento?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovimientoCreateManyInput = {
    partidaId: number
    jugadorId: number
    columnaLetra: string
    filaPosicion: number
    numeroMovimiento: number
    fechaCreacion?: Date | string
  }

  export type MovimientoUpdateManyMutationInput = {
    columnaLetra?: StringFieldUpdateOperationsInput | string
    filaPosicion?: IntFieldUpdateOperationsInput | number
    numeroMovimiento?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovimientoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    partidaId?: IntFieldUpdateOperationsInput | number
    jugadorId?: IntFieldUpdateOperationsInput | number
    columnaLetra?: StringFieldUpdateOperationsInput | string
    filaPosicion?: IntFieldUpdateOperationsInput | number
    numeroMovimiento?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Jugador_backupCreateInput = {
    idJugador: number
    nombre: string
    marcador?: number
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: Partida_backupCreateNestedManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: Partida_backupCreateNestedManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput
  }

  export type Jugador_backupUncheckedCreateInput = {
    idJugador: number
    nombre: string
    marcador?: number
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: Partida_backupUncheckedCreateNestedManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: Partida_backupUncheckedCreateNestedManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput
  }

  export type Jugador_backupUpdateInput = {
    idJugador?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    marcador?: IntFieldUpdateOperationsInput | number
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: Partida_backupUpdateManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupNestedInput
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: Partida_backupUpdateManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupNestedInput
  }

  export type Jugador_backupUncheckedUpdateInput = {
    idJugador?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    marcador?: IntFieldUpdateOperationsInput | number
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: Partida_backupUncheckedUpdateManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupNestedInput
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: Partida_backupUncheckedUpdateManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupNestedInput
  }

  export type Jugador_backupCreateManyInput = {
    idJugador: number
    nombre: string
    marcador?: number
  }

  export type Jugador_backupUpdateManyMutationInput = {
    idJugador?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    marcador?: IntFieldUpdateOperationsInput | number
  }

  export type Jugador_backupUncheckedUpdateManyInput = {
    idJugador?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    marcador?: IntFieldUpdateOperationsInput | number
  }

  export type Partida_backupCreateInput = {
    estadoTablero: string
    historialMovimientos?: string | null
    resultado?: string | null
    fechaInicio?: Date | string | null
    Jugador_backup_Partida_backup_idJugador1ToJugador_backup: Jugador_backupCreateNestedOneWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput
    Jugador_backup_Partida_backup_idJugador2ToJugador_backup: Jugador_backupCreateNestedOneWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput
  }

  export type Partida_backupUncheckedCreateInput = {
    idPartida?: number
    idJugador1: number
    idJugador2: number
    estadoTablero: string
    historialMovimientos?: string | null
    resultado?: string | null
    fechaInicio?: Date | string | null
  }

  export type Partida_backupUpdateInput = {
    estadoTablero?: StringFieldUpdateOperationsInput | string
    historialMovimientos?: NullableStringFieldUpdateOperationsInput | string | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Jugador_backup_Partida_backup_idJugador1ToJugador_backup?: Jugador_backupUpdateOneRequiredWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupNestedInput
    Jugador_backup_Partida_backup_idJugador2ToJugador_backup?: Jugador_backupUpdateOneRequiredWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupNestedInput
  }

  export type Partida_backupUncheckedUpdateInput = {
    idPartida?: IntFieldUpdateOperationsInput | number
    idJugador1?: IntFieldUpdateOperationsInput | number
    idJugador2?: IntFieldUpdateOperationsInput | number
    estadoTablero?: StringFieldUpdateOperationsInput | string
    historialMovimientos?: NullableStringFieldUpdateOperationsInput | string | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Partida_backupCreateManyInput = {
    idJugador1: number
    idJugador2: number
    estadoTablero: string
    historialMovimientos?: string | null
    resultado?: string | null
    fechaInicio?: Date | string | null
  }

  export type Partida_backupUpdateManyMutationInput = {
    estadoTablero?: StringFieldUpdateOperationsInput | string
    historialMovimientos?: NullableStringFieldUpdateOperationsInput | string | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Partida_backupUncheckedUpdateManyInput = {
    idPartida?: IntFieldUpdateOperationsInput | number
    idJugador1?: IntFieldUpdateOperationsInput | number
    idJugador2?: IntFieldUpdateOperationsInput | number
    estadoTablero?: StringFieldUpdateOperationsInput | string
    historialMovimientos?: NullableStringFieldUpdateOperationsInput | string | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MovimientoListRelationFilter = {
    every?: MovimientoWhereInput
    some?: MovimientoWhereInput
    none?: MovimientoWhereInput
  }

  export type PartidaListRelationFilter = {
    every?: PartidaWhereInput
    some?: PartidaWhereInput
    none?: PartidaWhereInput
  }

  export type MovimientoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PartidaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JugadorCountOrderByAggregateInput = {
    id?: SortOrder
    identificacion?: SortOrder
    nombre?: SortOrder
    partidasGanadas?: SortOrder
    partidasPerdidas?: SortOrder
    partidasEmpatadas?: SortOrder
    marcador?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type JugadorAvgOrderByAggregateInput = {
    id?: SortOrder
    identificacion?: SortOrder
    partidasGanadas?: SortOrder
    partidasPerdidas?: SortOrder
    partidasEmpatadas?: SortOrder
    marcador?: SortOrder
  }

  export type JugadorMaxOrderByAggregateInput = {
    id?: SortOrder
    identificacion?: SortOrder
    nombre?: SortOrder
    partidasGanadas?: SortOrder
    partidasPerdidas?: SortOrder
    partidasEmpatadas?: SortOrder
    marcador?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type JugadorMinOrderByAggregateInput = {
    id?: SortOrder
    identificacion?: SortOrder
    nombre?: SortOrder
    partidasGanadas?: SortOrder
    partidasPerdidas?: SortOrder
    partidasEmpatadas?: SortOrder
    marcador?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type JugadorSumOrderByAggregateInput = {
    id?: SortOrder
    identificacion?: SortOrder
    partidasGanadas?: SortOrder
    partidasPerdidas?: SortOrder
    partidasEmpatadas?: SortOrder
    marcador?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type JugadorNullableRelationFilter = {
    is?: JugadorWhereInput | null
    isNot?: JugadorWhereInput | null
  }

  export type JugadorRelationFilter = {
    is?: JugadorWhereInput
    isNot?: JugadorWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PartidaCountOrderByAggregateInput = {
    id?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    estado?: SortOrder
    ganadorId?: SortOrder
    resultado?: SortOrder
    tablero?: SortOrder
    turnoActual?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type PartidaAvgOrderByAggregateInput = {
    id?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    ganadorId?: SortOrder
    turnoActual?: SortOrder
  }

  export type PartidaMaxOrderByAggregateInput = {
    id?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    estado?: SortOrder
    ganadorId?: SortOrder
    resultado?: SortOrder
    tablero?: SortOrder
    turnoActual?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type PartidaMinOrderByAggregateInput = {
    id?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    estado?: SortOrder
    ganadorId?: SortOrder
    resultado?: SortOrder
    tablero?: SortOrder
    turnoActual?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type PartidaSumOrderByAggregateInput = {
    id?: SortOrder
    jugador1Id?: SortOrder
    jugador2Id?: SortOrder
    ganadorId?: SortOrder
    turnoActual?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type PartidaRelationFilter = {
    is?: PartidaWhereInput
    isNot?: PartidaWhereInput
  }

  export type MovimientoCountOrderByAggregateInput = {
    id?: SortOrder
    partidaId?: SortOrder
    jugadorId?: SortOrder
    columnaLetra?: SortOrder
    filaPosicion?: SortOrder
    numeroMovimiento?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type MovimientoAvgOrderByAggregateInput = {
    id?: SortOrder
    partidaId?: SortOrder
    jugadorId?: SortOrder
    filaPosicion?: SortOrder
    numeroMovimiento?: SortOrder
  }

  export type MovimientoMaxOrderByAggregateInput = {
    id?: SortOrder
    partidaId?: SortOrder
    jugadorId?: SortOrder
    columnaLetra?: SortOrder
    filaPosicion?: SortOrder
    numeroMovimiento?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type MovimientoMinOrderByAggregateInput = {
    id?: SortOrder
    partidaId?: SortOrder
    jugadorId?: SortOrder
    columnaLetra?: SortOrder
    filaPosicion?: SortOrder
    numeroMovimiento?: SortOrder
    fechaCreacion?: SortOrder
  }

  export type MovimientoSumOrderByAggregateInput = {
    id?: SortOrder
    partidaId?: SortOrder
    jugadorId?: SortOrder
    filaPosicion?: SortOrder
    numeroMovimiento?: SortOrder
  }

  export type Partida_backupListRelationFilter = {
    every?: Partida_backupWhereInput
    some?: Partida_backupWhereInput
    none?: Partida_backupWhereInput
  }

  export type Partida_backupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Jugador_backupCountOrderByAggregateInput = {
    idJugador?: SortOrder
    nombre?: SortOrder
    marcador?: SortOrder
  }

  export type Jugador_backupAvgOrderByAggregateInput = {
    idJugador?: SortOrder
    marcador?: SortOrder
  }

  export type Jugador_backupMaxOrderByAggregateInput = {
    idJugador?: SortOrder
    nombre?: SortOrder
    marcador?: SortOrder
  }

  export type Jugador_backupMinOrderByAggregateInput = {
    idJugador?: SortOrder
    nombre?: SortOrder
    marcador?: SortOrder
  }

  export type Jugador_backupSumOrderByAggregateInput = {
    idJugador?: SortOrder
    marcador?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type Jugador_backupRelationFilter = {
    is?: Jugador_backupWhereInput
    isNot?: Jugador_backupWhereInput
  }

  export type Partida_backupCountOrderByAggregateInput = {
    idPartida?: SortOrder
    idJugador1?: SortOrder
    idJugador2?: SortOrder
    estadoTablero?: SortOrder
    historialMovimientos?: SortOrder
    resultado?: SortOrder
    fechaInicio?: SortOrder
  }

  export type Partida_backupAvgOrderByAggregateInput = {
    idPartida?: SortOrder
    idJugador1?: SortOrder
    idJugador2?: SortOrder
  }

  export type Partida_backupMaxOrderByAggregateInput = {
    idPartida?: SortOrder
    idJugador1?: SortOrder
    idJugador2?: SortOrder
    estadoTablero?: SortOrder
    historialMovimientos?: SortOrder
    resultado?: SortOrder
    fechaInicio?: SortOrder
  }

  export type Partida_backupMinOrderByAggregateInput = {
    idPartida?: SortOrder
    idJugador1?: SortOrder
    idJugador2?: SortOrder
    estadoTablero?: SortOrder
    historialMovimientos?: SortOrder
    resultado?: SortOrder
    fechaInicio?: SortOrder
  }

  export type Partida_backupSumOrderByAggregateInput = {
    idPartida?: SortOrder
    idJugador1?: SortOrder
    idJugador2?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type MovimientoCreateNestedManyWithoutJugadorInput = {
    create?: XOR<MovimientoCreateWithoutJugadorInput, MovimientoUncheckedCreateWithoutJugadorInput> | MovimientoCreateWithoutJugadorInput[] | MovimientoUncheckedCreateWithoutJugadorInput[]
    connectOrCreate?: MovimientoCreateOrConnectWithoutJugadorInput | MovimientoCreateOrConnectWithoutJugadorInput[]
    createMany?: MovimientoCreateManyJugadorInputEnvelope
    connect?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
  }

  export type PartidaCreateNestedManyWithoutGanadorInput = {
    create?: XOR<PartidaCreateWithoutGanadorInput, PartidaUncheckedCreateWithoutGanadorInput> | PartidaCreateWithoutGanadorInput[] | PartidaUncheckedCreateWithoutGanadorInput[]
    connectOrCreate?: PartidaCreateOrConnectWithoutGanadorInput | PartidaCreateOrConnectWithoutGanadorInput[]
    createMany?: PartidaCreateManyGanadorInputEnvelope
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
  }

  export type PartidaCreateNestedManyWithoutJugador1Input = {
    create?: XOR<PartidaCreateWithoutJugador1Input, PartidaUncheckedCreateWithoutJugador1Input> | PartidaCreateWithoutJugador1Input[] | PartidaUncheckedCreateWithoutJugador1Input[]
    connectOrCreate?: PartidaCreateOrConnectWithoutJugador1Input | PartidaCreateOrConnectWithoutJugador1Input[]
    createMany?: PartidaCreateManyJugador1InputEnvelope
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
  }

  export type PartidaCreateNestedManyWithoutJugador2Input = {
    create?: XOR<PartidaCreateWithoutJugador2Input, PartidaUncheckedCreateWithoutJugador2Input> | PartidaCreateWithoutJugador2Input[] | PartidaUncheckedCreateWithoutJugador2Input[]
    connectOrCreate?: PartidaCreateOrConnectWithoutJugador2Input | PartidaCreateOrConnectWithoutJugador2Input[]
    createMany?: PartidaCreateManyJugador2InputEnvelope
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
  }

  export type MovimientoUncheckedCreateNestedManyWithoutJugadorInput = {
    create?: XOR<MovimientoCreateWithoutJugadorInput, MovimientoUncheckedCreateWithoutJugadorInput> | MovimientoCreateWithoutJugadorInput[] | MovimientoUncheckedCreateWithoutJugadorInput[]
    connectOrCreate?: MovimientoCreateOrConnectWithoutJugadorInput | MovimientoCreateOrConnectWithoutJugadorInput[]
    createMany?: MovimientoCreateManyJugadorInputEnvelope
    connect?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
  }

  export type PartidaUncheckedCreateNestedManyWithoutGanadorInput = {
    create?: XOR<PartidaCreateWithoutGanadorInput, PartidaUncheckedCreateWithoutGanadorInput> | PartidaCreateWithoutGanadorInput[] | PartidaUncheckedCreateWithoutGanadorInput[]
    connectOrCreate?: PartidaCreateOrConnectWithoutGanadorInput | PartidaCreateOrConnectWithoutGanadorInput[]
    createMany?: PartidaCreateManyGanadorInputEnvelope
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
  }

  export type PartidaUncheckedCreateNestedManyWithoutJugador1Input = {
    create?: XOR<PartidaCreateWithoutJugador1Input, PartidaUncheckedCreateWithoutJugador1Input> | PartidaCreateWithoutJugador1Input[] | PartidaUncheckedCreateWithoutJugador1Input[]
    connectOrCreate?: PartidaCreateOrConnectWithoutJugador1Input | PartidaCreateOrConnectWithoutJugador1Input[]
    createMany?: PartidaCreateManyJugador1InputEnvelope
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
  }

  export type PartidaUncheckedCreateNestedManyWithoutJugador2Input = {
    create?: XOR<PartidaCreateWithoutJugador2Input, PartidaUncheckedCreateWithoutJugador2Input> | PartidaCreateWithoutJugador2Input[] | PartidaUncheckedCreateWithoutJugador2Input[]
    connectOrCreate?: PartidaCreateOrConnectWithoutJugador2Input | PartidaCreateOrConnectWithoutJugador2Input[]
    createMany?: PartidaCreateManyJugador2InputEnvelope
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MovimientoUpdateManyWithoutJugadorNestedInput = {
    create?: XOR<MovimientoCreateWithoutJugadorInput, MovimientoUncheckedCreateWithoutJugadorInput> | MovimientoCreateWithoutJugadorInput[] | MovimientoUncheckedCreateWithoutJugadorInput[]
    connectOrCreate?: MovimientoCreateOrConnectWithoutJugadorInput | MovimientoCreateOrConnectWithoutJugadorInput[]
    upsert?: MovimientoUpsertWithWhereUniqueWithoutJugadorInput | MovimientoUpsertWithWhereUniqueWithoutJugadorInput[]
    createMany?: MovimientoCreateManyJugadorInputEnvelope
    set?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    disconnect?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    delete?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    connect?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    update?: MovimientoUpdateWithWhereUniqueWithoutJugadorInput | MovimientoUpdateWithWhereUniqueWithoutJugadorInput[]
    updateMany?: MovimientoUpdateManyWithWhereWithoutJugadorInput | MovimientoUpdateManyWithWhereWithoutJugadorInput[]
    deleteMany?: MovimientoScalarWhereInput | MovimientoScalarWhereInput[]
  }

  export type PartidaUpdateManyWithoutGanadorNestedInput = {
    create?: XOR<PartidaCreateWithoutGanadorInput, PartidaUncheckedCreateWithoutGanadorInput> | PartidaCreateWithoutGanadorInput[] | PartidaUncheckedCreateWithoutGanadorInput[]
    connectOrCreate?: PartidaCreateOrConnectWithoutGanadorInput | PartidaCreateOrConnectWithoutGanadorInput[]
    upsert?: PartidaUpsertWithWhereUniqueWithoutGanadorInput | PartidaUpsertWithWhereUniqueWithoutGanadorInput[]
    createMany?: PartidaCreateManyGanadorInputEnvelope
    set?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    disconnect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    delete?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    update?: PartidaUpdateWithWhereUniqueWithoutGanadorInput | PartidaUpdateWithWhereUniqueWithoutGanadorInput[]
    updateMany?: PartidaUpdateManyWithWhereWithoutGanadorInput | PartidaUpdateManyWithWhereWithoutGanadorInput[]
    deleteMany?: PartidaScalarWhereInput | PartidaScalarWhereInput[]
  }

  export type PartidaUpdateManyWithoutJugador1NestedInput = {
    create?: XOR<PartidaCreateWithoutJugador1Input, PartidaUncheckedCreateWithoutJugador1Input> | PartidaCreateWithoutJugador1Input[] | PartidaUncheckedCreateWithoutJugador1Input[]
    connectOrCreate?: PartidaCreateOrConnectWithoutJugador1Input | PartidaCreateOrConnectWithoutJugador1Input[]
    upsert?: PartidaUpsertWithWhereUniqueWithoutJugador1Input | PartidaUpsertWithWhereUniqueWithoutJugador1Input[]
    createMany?: PartidaCreateManyJugador1InputEnvelope
    set?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    disconnect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    delete?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    update?: PartidaUpdateWithWhereUniqueWithoutJugador1Input | PartidaUpdateWithWhereUniqueWithoutJugador1Input[]
    updateMany?: PartidaUpdateManyWithWhereWithoutJugador1Input | PartidaUpdateManyWithWhereWithoutJugador1Input[]
    deleteMany?: PartidaScalarWhereInput | PartidaScalarWhereInput[]
  }

  export type PartidaUpdateManyWithoutJugador2NestedInput = {
    create?: XOR<PartidaCreateWithoutJugador2Input, PartidaUncheckedCreateWithoutJugador2Input> | PartidaCreateWithoutJugador2Input[] | PartidaUncheckedCreateWithoutJugador2Input[]
    connectOrCreate?: PartidaCreateOrConnectWithoutJugador2Input | PartidaCreateOrConnectWithoutJugador2Input[]
    upsert?: PartidaUpsertWithWhereUniqueWithoutJugador2Input | PartidaUpsertWithWhereUniqueWithoutJugador2Input[]
    createMany?: PartidaCreateManyJugador2InputEnvelope
    set?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    disconnect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    delete?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    update?: PartidaUpdateWithWhereUniqueWithoutJugador2Input | PartidaUpdateWithWhereUniqueWithoutJugador2Input[]
    updateMany?: PartidaUpdateManyWithWhereWithoutJugador2Input | PartidaUpdateManyWithWhereWithoutJugador2Input[]
    deleteMany?: PartidaScalarWhereInput | PartidaScalarWhereInput[]
  }

  export type MovimientoUncheckedUpdateManyWithoutJugadorNestedInput = {
    create?: XOR<MovimientoCreateWithoutJugadorInput, MovimientoUncheckedCreateWithoutJugadorInput> | MovimientoCreateWithoutJugadorInput[] | MovimientoUncheckedCreateWithoutJugadorInput[]
    connectOrCreate?: MovimientoCreateOrConnectWithoutJugadorInput | MovimientoCreateOrConnectWithoutJugadorInput[]
    upsert?: MovimientoUpsertWithWhereUniqueWithoutJugadorInput | MovimientoUpsertWithWhereUniqueWithoutJugadorInput[]
    createMany?: MovimientoCreateManyJugadorInputEnvelope
    set?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    disconnect?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    delete?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    connect?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    update?: MovimientoUpdateWithWhereUniqueWithoutJugadorInput | MovimientoUpdateWithWhereUniqueWithoutJugadorInput[]
    updateMany?: MovimientoUpdateManyWithWhereWithoutJugadorInput | MovimientoUpdateManyWithWhereWithoutJugadorInput[]
    deleteMany?: MovimientoScalarWhereInput | MovimientoScalarWhereInput[]
  }

  export type PartidaUncheckedUpdateManyWithoutGanadorNestedInput = {
    create?: XOR<PartidaCreateWithoutGanadorInput, PartidaUncheckedCreateWithoutGanadorInput> | PartidaCreateWithoutGanadorInput[] | PartidaUncheckedCreateWithoutGanadorInput[]
    connectOrCreate?: PartidaCreateOrConnectWithoutGanadorInput | PartidaCreateOrConnectWithoutGanadorInput[]
    upsert?: PartidaUpsertWithWhereUniqueWithoutGanadorInput | PartidaUpsertWithWhereUniqueWithoutGanadorInput[]
    createMany?: PartidaCreateManyGanadorInputEnvelope
    set?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    disconnect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    delete?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    update?: PartidaUpdateWithWhereUniqueWithoutGanadorInput | PartidaUpdateWithWhereUniqueWithoutGanadorInput[]
    updateMany?: PartidaUpdateManyWithWhereWithoutGanadorInput | PartidaUpdateManyWithWhereWithoutGanadorInput[]
    deleteMany?: PartidaScalarWhereInput | PartidaScalarWhereInput[]
  }

  export type PartidaUncheckedUpdateManyWithoutJugador1NestedInput = {
    create?: XOR<PartidaCreateWithoutJugador1Input, PartidaUncheckedCreateWithoutJugador1Input> | PartidaCreateWithoutJugador1Input[] | PartidaUncheckedCreateWithoutJugador1Input[]
    connectOrCreate?: PartidaCreateOrConnectWithoutJugador1Input | PartidaCreateOrConnectWithoutJugador1Input[]
    upsert?: PartidaUpsertWithWhereUniqueWithoutJugador1Input | PartidaUpsertWithWhereUniqueWithoutJugador1Input[]
    createMany?: PartidaCreateManyJugador1InputEnvelope
    set?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    disconnect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    delete?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    update?: PartidaUpdateWithWhereUniqueWithoutJugador1Input | PartidaUpdateWithWhereUniqueWithoutJugador1Input[]
    updateMany?: PartidaUpdateManyWithWhereWithoutJugador1Input | PartidaUpdateManyWithWhereWithoutJugador1Input[]
    deleteMany?: PartidaScalarWhereInput | PartidaScalarWhereInput[]
  }

  export type PartidaUncheckedUpdateManyWithoutJugador2NestedInput = {
    create?: XOR<PartidaCreateWithoutJugador2Input, PartidaUncheckedCreateWithoutJugador2Input> | PartidaCreateWithoutJugador2Input[] | PartidaUncheckedCreateWithoutJugador2Input[]
    connectOrCreate?: PartidaCreateOrConnectWithoutJugador2Input | PartidaCreateOrConnectWithoutJugador2Input[]
    upsert?: PartidaUpsertWithWhereUniqueWithoutJugador2Input | PartidaUpsertWithWhereUniqueWithoutJugador2Input[]
    createMany?: PartidaCreateManyJugador2InputEnvelope
    set?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    disconnect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    delete?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    connect?: PartidaWhereUniqueInput | PartidaWhereUniqueInput[]
    update?: PartidaUpdateWithWhereUniqueWithoutJugador2Input | PartidaUpdateWithWhereUniqueWithoutJugador2Input[]
    updateMany?: PartidaUpdateManyWithWhereWithoutJugador2Input | PartidaUpdateManyWithWhereWithoutJugador2Input[]
    deleteMany?: PartidaScalarWhereInput | PartidaScalarWhereInput[]
  }

  export type MovimientoCreateNestedManyWithoutPartidaInput = {
    create?: XOR<MovimientoCreateWithoutPartidaInput, MovimientoUncheckedCreateWithoutPartidaInput> | MovimientoCreateWithoutPartidaInput[] | MovimientoUncheckedCreateWithoutPartidaInput[]
    connectOrCreate?: MovimientoCreateOrConnectWithoutPartidaInput | MovimientoCreateOrConnectWithoutPartidaInput[]
    createMany?: MovimientoCreateManyPartidaInputEnvelope
    connect?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
  }

  export type JugadorCreateNestedOneWithoutPartidasGanadorInput = {
    create?: XOR<JugadorCreateWithoutPartidasGanadorInput, JugadorUncheckedCreateWithoutPartidasGanadorInput>
    connectOrCreate?: JugadorCreateOrConnectWithoutPartidasGanadorInput
    connect?: JugadorWhereUniqueInput
  }

  export type JugadorCreateNestedOneWithoutPartidasComoJugador1Input = {
    create?: XOR<JugadorCreateWithoutPartidasComoJugador1Input, JugadorUncheckedCreateWithoutPartidasComoJugador1Input>
    connectOrCreate?: JugadorCreateOrConnectWithoutPartidasComoJugador1Input
    connect?: JugadorWhereUniqueInput
  }

  export type JugadorCreateNestedOneWithoutPartidasComoJugador2Input = {
    create?: XOR<JugadorCreateWithoutPartidasComoJugador2Input, JugadorUncheckedCreateWithoutPartidasComoJugador2Input>
    connectOrCreate?: JugadorCreateOrConnectWithoutPartidasComoJugador2Input
    connect?: JugadorWhereUniqueInput
  }

  export type MovimientoUncheckedCreateNestedManyWithoutPartidaInput = {
    create?: XOR<MovimientoCreateWithoutPartidaInput, MovimientoUncheckedCreateWithoutPartidaInput> | MovimientoCreateWithoutPartidaInput[] | MovimientoUncheckedCreateWithoutPartidaInput[]
    connectOrCreate?: MovimientoCreateOrConnectWithoutPartidaInput | MovimientoCreateOrConnectWithoutPartidaInput[]
    createMany?: MovimientoCreateManyPartidaInputEnvelope
    connect?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type MovimientoUpdateManyWithoutPartidaNestedInput = {
    create?: XOR<MovimientoCreateWithoutPartidaInput, MovimientoUncheckedCreateWithoutPartidaInput> | MovimientoCreateWithoutPartidaInput[] | MovimientoUncheckedCreateWithoutPartidaInput[]
    connectOrCreate?: MovimientoCreateOrConnectWithoutPartidaInput | MovimientoCreateOrConnectWithoutPartidaInput[]
    upsert?: MovimientoUpsertWithWhereUniqueWithoutPartidaInput | MovimientoUpsertWithWhereUniqueWithoutPartidaInput[]
    createMany?: MovimientoCreateManyPartidaInputEnvelope
    set?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    disconnect?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    delete?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    connect?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    update?: MovimientoUpdateWithWhereUniqueWithoutPartidaInput | MovimientoUpdateWithWhereUniqueWithoutPartidaInput[]
    updateMany?: MovimientoUpdateManyWithWhereWithoutPartidaInput | MovimientoUpdateManyWithWhereWithoutPartidaInput[]
    deleteMany?: MovimientoScalarWhereInput | MovimientoScalarWhereInput[]
  }

  export type JugadorUpdateOneWithoutPartidasGanadorNestedInput = {
    create?: XOR<JugadorCreateWithoutPartidasGanadorInput, JugadorUncheckedCreateWithoutPartidasGanadorInput>
    connectOrCreate?: JugadorCreateOrConnectWithoutPartidasGanadorInput
    upsert?: JugadorUpsertWithoutPartidasGanadorInput
    disconnect?: JugadorWhereInput | boolean
    delete?: JugadorWhereInput | boolean
    connect?: JugadorWhereUniqueInput
    update?: XOR<XOR<JugadorUpdateToOneWithWhereWithoutPartidasGanadorInput, JugadorUpdateWithoutPartidasGanadorInput>, JugadorUncheckedUpdateWithoutPartidasGanadorInput>
  }

  export type JugadorUpdateOneRequiredWithoutPartidasComoJugador1NestedInput = {
    create?: XOR<JugadorCreateWithoutPartidasComoJugador1Input, JugadorUncheckedCreateWithoutPartidasComoJugador1Input>
    connectOrCreate?: JugadorCreateOrConnectWithoutPartidasComoJugador1Input
    upsert?: JugadorUpsertWithoutPartidasComoJugador1Input
    connect?: JugadorWhereUniqueInput
    update?: XOR<XOR<JugadorUpdateToOneWithWhereWithoutPartidasComoJugador1Input, JugadorUpdateWithoutPartidasComoJugador1Input>, JugadorUncheckedUpdateWithoutPartidasComoJugador1Input>
  }

  export type JugadorUpdateOneRequiredWithoutPartidasComoJugador2NestedInput = {
    create?: XOR<JugadorCreateWithoutPartidasComoJugador2Input, JugadorUncheckedCreateWithoutPartidasComoJugador2Input>
    connectOrCreate?: JugadorCreateOrConnectWithoutPartidasComoJugador2Input
    upsert?: JugadorUpsertWithoutPartidasComoJugador2Input
    connect?: JugadorWhereUniqueInput
    update?: XOR<XOR<JugadorUpdateToOneWithWhereWithoutPartidasComoJugador2Input, JugadorUpdateWithoutPartidasComoJugador2Input>, JugadorUncheckedUpdateWithoutPartidasComoJugador2Input>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MovimientoUncheckedUpdateManyWithoutPartidaNestedInput = {
    create?: XOR<MovimientoCreateWithoutPartidaInput, MovimientoUncheckedCreateWithoutPartidaInput> | MovimientoCreateWithoutPartidaInput[] | MovimientoUncheckedCreateWithoutPartidaInput[]
    connectOrCreate?: MovimientoCreateOrConnectWithoutPartidaInput | MovimientoCreateOrConnectWithoutPartidaInput[]
    upsert?: MovimientoUpsertWithWhereUniqueWithoutPartidaInput | MovimientoUpsertWithWhereUniqueWithoutPartidaInput[]
    createMany?: MovimientoCreateManyPartidaInputEnvelope
    set?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    disconnect?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    delete?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    connect?: MovimientoWhereUniqueInput | MovimientoWhereUniqueInput[]
    update?: MovimientoUpdateWithWhereUniqueWithoutPartidaInput | MovimientoUpdateWithWhereUniqueWithoutPartidaInput[]
    updateMany?: MovimientoUpdateManyWithWhereWithoutPartidaInput | MovimientoUpdateManyWithWhereWithoutPartidaInput[]
    deleteMany?: MovimientoScalarWhereInput | MovimientoScalarWhereInput[]
  }

  export type JugadorCreateNestedOneWithoutMovimientosInput = {
    create?: XOR<JugadorCreateWithoutMovimientosInput, JugadorUncheckedCreateWithoutMovimientosInput>
    connectOrCreate?: JugadorCreateOrConnectWithoutMovimientosInput
    connect?: JugadorWhereUniqueInput
  }

  export type PartidaCreateNestedOneWithoutMovimientosInput = {
    create?: XOR<PartidaCreateWithoutMovimientosInput, PartidaUncheckedCreateWithoutMovimientosInput>
    connectOrCreate?: PartidaCreateOrConnectWithoutMovimientosInput
    connect?: PartidaWhereUniqueInput
  }

  export type JugadorUpdateOneRequiredWithoutMovimientosNestedInput = {
    create?: XOR<JugadorCreateWithoutMovimientosInput, JugadorUncheckedCreateWithoutMovimientosInput>
    connectOrCreate?: JugadorCreateOrConnectWithoutMovimientosInput
    upsert?: JugadorUpsertWithoutMovimientosInput
    connect?: JugadorWhereUniqueInput
    update?: XOR<XOR<JugadorUpdateToOneWithWhereWithoutMovimientosInput, JugadorUpdateWithoutMovimientosInput>, JugadorUncheckedUpdateWithoutMovimientosInput>
  }

  export type PartidaUpdateOneRequiredWithoutMovimientosNestedInput = {
    create?: XOR<PartidaCreateWithoutMovimientosInput, PartidaUncheckedCreateWithoutMovimientosInput>
    connectOrCreate?: PartidaCreateOrConnectWithoutMovimientosInput
    upsert?: PartidaUpsertWithoutMovimientosInput
    connect?: PartidaWhereUniqueInput
    update?: XOR<XOR<PartidaUpdateToOneWithWhereWithoutMovimientosInput, PartidaUpdateWithoutMovimientosInput>, PartidaUncheckedUpdateWithoutMovimientosInput>
  }

  export type Partida_backupCreateNestedManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    create?: XOR<Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput, Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput> | Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[] | Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    connectOrCreate?: Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput | Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    createMany?: Partida_backupCreateManyJugador_backup_Partida_backup_idJugador1ToJugador_backupInputEnvelope
    connect?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
  }

  export type Partida_backupCreateNestedManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    create?: XOR<Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput, Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput> | Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[] | Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    connectOrCreate?: Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput | Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    createMany?: Partida_backupCreateManyJugador_backup_Partida_backup_idJugador2ToJugador_backupInputEnvelope
    connect?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
  }

  export type Partida_backupUncheckedCreateNestedManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    create?: XOR<Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput, Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput> | Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[] | Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    connectOrCreate?: Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput | Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    createMany?: Partida_backupCreateManyJugador_backup_Partida_backup_idJugador1ToJugador_backupInputEnvelope
    connect?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
  }

  export type Partida_backupUncheckedCreateNestedManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    create?: XOR<Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput, Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput> | Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[] | Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    connectOrCreate?: Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput | Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    createMany?: Partida_backupCreateManyJugador_backup_Partida_backup_idJugador2ToJugador_backupInputEnvelope
    connect?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
  }

  export type Partida_backupUpdateManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupNestedInput = {
    create?: XOR<Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput, Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput> | Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[] | Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    connectOrCreate?: Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput | Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    upsert?: Partida_backupUpsertWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput | Partida_backupUpsertWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    createMany?: Partida_backupCreateManyJugador_backup_Partida_backup_idJugador1ToJugador_backupInputEnvelope
    set?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    disconnect?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    delete?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    connect?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    update?: Partida_backupUpdateWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput | Partida_backupUpdateWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    updateMany?: Partida_backupUpdateManyWithWhereWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput | Partida_backupUpdateManyWithWhereWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    deleteMany?: Partida_backupScalarWhereInput | Partida_backupScalarWhereInput[]
  }

  export type Partida_backupUpdateManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupNestedInput = {
    create?: XOR<Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput, Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput> | Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[] | Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    connectOrCreate?: Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput | Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    upsert?: Partida_backupUpsertWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput | Partida_backupUpsertWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    createMany?: Partida_backupCreateManyJugador_backup_Partida_backup_idJugador2ToJugador_backupInputEnvelope
    set?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    disconnect?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    delete?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    connect?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    update?: Partida_backupUpdateWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput | Partida_backupUpdateWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    updateMany?: Partida_backupUpdateManyWithWhereWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput | Partida_backupUpdateManyWithWhereWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    deleteMany?: Partida_backupScalarWhereInput | Partida_backupScalarWhereInput[]
  }

  export type Partida_backupUncheckedUpdateManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupNestedInput = {
    create?: XOR<Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput, Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput> | Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[] | Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    connectOrCreate?: Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput | Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    upsert?: Partida_backupUpsertWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput | Partida_backupUpsertWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    createMany?: Partida_backupCreateManyJugador_backup_Partida_backup_idJugador1ToJugador_backupInputEnvelope
    set?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    disconnect?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    delete?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    connect?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    update?: Partida_backupUpdateWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput | Partida_backupUpdateWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    updateMany?: Partida_backupUpdateManyWithWhereWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput | Partida_backupUpdateManyWithWhereWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
    deleteMany?: Partida_backupScalarWhereInput | Partida_backupScalarWhereInput[]
  }

  export type Partida_backupUncheckedUpdateManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupNestedInput = {
    create?: XOR<Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput, Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput> | Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[] | Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    connectOrCreate?: Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput | Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    upsert?: Partida_backupUpsertWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput | Partida_backupUpsertWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    createMany?: Partida_backupCreateManyJugador_backup_Partida_backup_idJugador2ToJugador_backupInputEnvelope
    set?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    disconnect?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    delete?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    connect?: Partida_backupWhereUniqueInput | Partida_backupWhereUniqueInput[]
    update?: Partida_backupUpdateWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput | Partida_backupUpdateWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    updateMany?: Partida_backupUpdateManyWithWhereWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput | Partida_backupUpdateManyWithWhereWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
    deleteMany?: Partida_backupScalarWhereInput | Partida_backupScalarWhereInput[]
  }

  export type Jugador_backupCreateNestedOneWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    create?: XOR<Jugador_backupCreateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput, Jugador_backupUncheckedCreateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput>
    connectOrCreate?: Jugador_backupCreateOrConnectWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput
    connect?: Jugador_backupWhereUniqueInput
  }

  export type Jugador_backupCreateNestedOneWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    create?: XOR<Jugador_backupCreateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput, Jugador_backupUncheckedCreateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput>
    connectOrCreate?: Jugador_backupCreateOrConnectWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput
    connect?: Jugador_backupWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type Jugador_backupUpdateOneRequiredWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupNestedInput = {
    create?: XOR<Jugador_backupCreateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput, Jugador_backupUncheckedCreateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput>
    connectOrCreate?: Jugador_backupCreateOrConnectWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput
    upsert?: Jugador_backupUpsertWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput
    connect?: Jugador_backupWhereUniqueInput
    update?: XOR<XOR<Jugador_backupUpdateToOneWithWhereWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput, Jugador_backupUpdateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput>, Jugador_backupUncheckedUpdateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput>
  }

  export type Jugador_backupUpdateOneRequiredWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupNestedInput = {
    create?: XOR<Jugador_backupCreateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput, Jugador_backupUncheckedCreateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput>
    connectOrCreate?: Jugador_backupCreateOrConnectWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput
    upsert?: Jugador_backupUpsertWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput
    connect?: Jugador_backupWhereUniqueInput
    update?: XOR<XOR<Jugador_backupUpdateToOneWithWhereWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput, Jugador_backupUpdateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput>, Jugador_backupUncheckedUpdateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type MovimientoCreateWithoutJugadorInput = {
    columnaLetra: string
    filaPosicion: number
    numeroMovimiento: number
    fechaCreacion?: Date | string
    partida: PartidaCreateNestedOneWithoutMovimientosInput
  }

  export type MovimientoUncheckedCreateWithoutJugadorInput = {
    id?: number
    partidaId: number
    columnaLetra: string
    filaPosicion: number
    numeroMovimiento: number
    fechaCreacion?: Date | string
  }

  export type MovimientoCreateOrConnectWithoutJugadorInput = {
    where: MovimientoWhereUniqueInput
    create: XOR<MovimientoCreateWithoutJugadorInput, MovimientoUncheckedCreateWithoutJugadorInput>
  }

  export type MovimientoCreateManyJugadorInputEnvelope = {
    data: MovimientoCreateManyJugadorInput | MovimientoCreateManyJugadorInput[]
  }

  export type PartidaCreateWithoutGanadorInput = {
    estado?: string
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoCreateNestedManyWithoutPartidaInput
    jugador1: JugadorCreateNestedOneWithoutPartidasComoJugador1Input
    jugador2: JugadorCreateNestedOneWithoutPartidasComoJugador2Input
  }

  export type PartidaUncheckedCreateWithoutGanadorInput = {
    id?: number
    jugador1Id: number
    jugador2Id: number
    estado?: string
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoUncheckedCreateNestedManyWithoutPartidaInput
  }

  export type PartidaCreateOrConnectWithoutGanadorInput = {
    where: PartidaWhereUniqueInput
    create: XOR<PartidaCreateWithoutGanadorInput, PartidaUncheckedCreateWithoutGanadorInput>
  }

  export type PartidaCreateManyGanadorInputEnvelope = {
    data: PartidaCreateManyGanadorInput | PartidaCreateManyGanadorInput[]
  }

  export type PartidaCreateWithoutJugador1Input = {
    estado?: string
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoCreateNestedManyWithoutPartidaInput
    ganador?: JugadorCreateNestedOneWithoutPartidasGanadorInput
    jugador2: JugadorCreateNestedOneWithoutPartidasComoJugador2Input
  }

  export type PartidaUncheckedCreateWithoutJugador1Input = {
    id?: number
    jugador2Id: number
    estado?: string
    ganadorId?: number | null
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoUncheckedCreateNestedManyWithoutPartidaInput
  }

  export type PartidaCreateOrConnectWithoutJugador1Input = {
    where: PartidaWhereUniqueInput
    create: XOR<PartidaCreateWithoutJugador1Input, PartidaUncheckedCreateWithoutJugador1Input>
  }

  export type PartidaCreateManyJugador1InputEnvelope = {
    data: PartidaCreateManyJugador1Input | PartidaCreateManyJugador1Input[]
  }

  export type PartidaCreateWithoutJugador2Input = {
    estado?: string
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoCreateNestedManyWithoutPartidaInput
    ganador?: JugadorCreateNestedOneWithoutPartidasGanadorInput
    jugador1: JugadorCreateNestedOneWithoutPartidasComoJugador1Input
  }

  export type PartidaUncheckedCreateWithoutJugador2Input = {
    id?: number
    jugador1Id: number
    estado?: string
    ganadorId?: number | null
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoUncheckedCreateNestedManyWithoutPartidaInput
  }

  export type PartidaCreateOrConnectWithoutJugador2Input = {
    where: PartidaWhereUniqueInput
    create: XOR<PartidaCreateWithoutJugador2Input, PartidaUncheckedCreateWithoutJugador2Input>
  }

  export type PartidaCreateManyJugador2InputEnvelope = {
    data: PartidaCreateManyJugador2Input | PartidaCreateManyJugador2Input[]
  }

  export type MovimientoUpsertWithWhereUniqueWithoutJugadorInput = {
    where: MovimientoWhereUniqueInput
    update: XOR<MovimientoUpdateWithoutJugadorInput, MovimientoUncheckedUpdateWithoutJugadorInput>
    create: XOR<MovimientoCreateWithoutJugadorInput, MovimientoUncheckedCreateWithoutJugadorInput>
  }

  export type MovimientoUpdateWithWhereUniqueWithoutJugadorInput = {
    where: MovimientoWhereUniqueInput
    data: XOR<MovimientoUpdateWithoutJugadorInput, MovimientoUncheckedUpdateWithoutJugadorInput>
  }

  export type MovimientoUpdateManyWithWhereWithoutJugadorInput = {
    where: MovimientoScalarWhereInput
    data: XOR<MovimientoUpdateManyMutationInput, MovimientoUncheckedUpdateManyWithoutJugadorInput>
  }

  export type MovimientoScalarWhereInput = {
    AND?: MovimientoScalarWhereInput | MovimientoScalarWhereInput[]
    OR?: MovimientoScalarWhereInput[]
    NOT?: MovimientoScalarWhereInput | MovimientoScalarWhereInput[]
    id?: IntFilter<"Movimiento"> | number
    partidaId?: IntFilter<"Movimiento"> | number
    jugadorId?: IntFilter<"Movimiento"> | number
    columnaLetra?: StringFilter<"Movimiento"> | string
    filaPosicion?: IntFilter<"Movimiento"> | number
    numeroMovimiento?: IntFilter<"Movimiento"> | number
    fechaCreacion?: DateTimeFilter<"Movimiento"> | Date | string
  }

  export type PartidaUpsertWithWhereUniqueWithoutGanadorInput = {
    where: PartidaWhereUniqueInput
    update: XOR<PartidaUpdateWithoutGanadorInput, PartidaUncheckedUpdateWithoutGanadorInput>
    create: XOR<PartidaCreateWithoutGanadorInput, PartidaUncheckedCreateWithoutGanadorInput>
  }

  export type PartidaUpdateWithWhereUniqueWithoutGanadorInput = {
    where: PartidaWhereUniqueInput
    data: XOR<PartidaUpdateWithoutGanadorInput, PartidaUncheckedUpdateWithoutGanadorInput>
  }

  export type PartidaUpdateManyWithWhereWithoutGanadorInput = {
    where: PartidaScalarWhereInput
    data: XOR<PartidaUpdateManyMutationInput, PartidaUncheckedUpdateManyWithoutGanadorInput>
  }

  export type PartidaScalarWhereInput = {
    AND?: PartidaScalarWhereInput | PartidaScalarWhereInput[]
    OR?: PartidaScalarWhereInput[]
    NOT?: PartidaScalarWhereInput | PartidaScalarWhereInput[]
    id?: IntFilter<"Partida"> | number
    jugador1Id?: IntFilter<"Partida"> | number
    jugador2Id?: IntFilter<"Partida"> | number
    estado?: StringFilter<"Partida"> | string
    ganadorId?: IntNullableFilter<"Partida"> | number | null
    resultado?: StringNullableFilter<"Partida"> | string | null
    tablero?: StringFilter<"Partida"> | string
    turnoActual?: IntFilter<"Partida"> | number
    fechaCreacion?: DateTimeFilter<"Partida"> | Date | string
    fechaActualizacion?: DateTimeFilter<"Partida"> | Date | string
  }

  export type PartidaUpsertWithWhereUniqueWithoutJugador1Input = {
    where: PartidaWhereUniqueInput
    update: XOR<PartidaUpdateWithoutJugador1Input, PartidaUncheckedUpdateWithoutJugador1Input>
    create: XOR<PartidaCreateWithoutJugador1Input, PartidaUncheckedCreateWithoutJugador1Input>
  }

  export type PartidaUpdateWithWhereUniqueWithoutJugador1Input = {
    where: PartidaWhereUniqueInput
    data: XOR<PartidaUpdateWithoutJugador1Input, PartidaUncheckedUpdateWithoutJugador1Input>
  }

  export type PartidaUpdateManyWithWhereWithoutJugador1Input = {
    where: PartidaScalarWhereInput
    data: XOR<PartidaUpdateManyMutationInput, PartidaUncheckedUpdateManyWithoutJugador1Input>
  }

  export type PartidaUpsertWithWhereUniqueWithoutJugador2Input = {
    where: PartidaWhereUniqueInput
    update: XOR<PartidaUpdateWithoutJugador2Input, PartidaUncheckedUpdateWithoutJugador2Input>
    create: XOR<PartidaCreateWithoutJugador2Input, PartidaUncheckedCreateWithoutJugador2Input>
  }

  export type PartidaUpdateWithWhereUniqueWithoutJugador2Input = {
    where: PartidaWhereUniqueInput
    data: XOR<PartidaUpdateWithoutJugador2Input, PartidaUncheckedUpdateWithoutJugador2Input>
  }

  export type PartidaUpdateManyWithWhereWithoutJugador2Input = {
    where: PartidaScalarWhereInput
    data: XOR<PartidaUpdateManyMutationInput, PartidaUncheckedUpdateManyWithoutJugador2Input>
  }

  export type MovimientoCreateWithoutPartidaInput = {
    columnaLetra: string
    filaPosicion: number
    numeroMovimiento: number
    fechaCreacion?: Date | string
    jugador: JugadorCreateNestedOneWithoutMovimientosInput
  }

  export type MovimientoUncheckedCreateWithoutPartidaInput = {
    id?: number
    jugadorId: number
    columnaLetra: string
    filaPosicion: number
    numeroMovimiento: number
    fechaCreacion?: Date | string
  }

  export type MovimientoCreateOrConnectWithoutPartidaInput = {
    where: MovimientoWhereUniqueInput
    create: XOR<MovimientoCreateWithoutPartidaInput, MovimientoUncheckedCreateWithoutPartidaInput>
  }

  export type MovimientoCreateManyPartidaInputEnvelope = {
    data: MovimientoCreateManyPartidaInput | MovimientoCreateManyPartidaInput[]
  }

  export type JugadorCreateWithoutPartidasGanadorInput = {
    identificacion: bigint | number
    nombre: string
    partidasGanadas?: number
    partidasPerdidas?: number
    partidasEmpatadas?: number
    marcador?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoCreateNestedManyWithoutJugadorInput
    partidasComoJugador1?: PartidaCreateNestedManyWithoutJugador1Input
    partidasComoJugador2?: PartidaCreateNestedManyWithoutJugador2Input
  }

  export type JugadorUncheckedCreateWithoutPartidasGanadorInput = {
    id?: number
    identificacion: bigint | number
    nombre: string
    partidasGanadas?: number
    partidasPerdidas?: number
    partidasEmpatadas?: number
    marcador?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoUncheckedCreateNestedManyWithoutJugadorInput
    partidasComoJugador1?: PartidaUncheckedCreateNestedManyWithoutJugador1Input
    partidasComoJugador2?: PartidaUncheckedCreateNestedManyWithoutJugador2Input
  }

  export type JugadorCreateOrConnectWithoutPartidasGanadorInput = {
    where: JugadorWhereUniqueInput
    create: XOR<JugadorCreateWithoutPartidasGanadorInput, JugadorUncheckedCreateWithoutPartidasGanadorInput>
  }

  export type JugadorCreateWithoutPartidasComoJugador1Input = {
    identificacion: bigint | number
    nombre: string
    partidasGanadas?: number
    partidasPerdidas?: number
    partidasEmpatadas?: number
    marcador?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoCreateNestedManyWithoutJugadorInput
    partidasGanador?: PartidaCreateNestedManyWithoutGanadorInput
    partidasComoJugador2?: PartidaCreateNestedManyWithoutJugador2Input
  }

  export type JugadorUncheckedCreateWithoutPartidasComoJugador1Input = {
    id?: number
    identificacion: bigint | number
    nombre: string
    partidasGanadas?: number
    partidasPerdidas?: number
    partidasEmpatadas?: number
    marcador?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoUncheckedCreateNestedManyWithoutJugadorInput
    partidasGanador?: PartidaUncheckedCreateNestedManyWithoutGanadorInput
    partidasComoJugador2?: PartidaUncheckedCreateNestedManyWithoutJugador2Input
  }

  export type JugadorCreateOrConnectWithoutPartidasComoJugador1Input = {
    where: JugadorWhereUniqueInput
    create: XOR<JugadorCreateWithoutPartidasComoJugador1Input, JugadorUncheckedCreateWithoutPartidasComoJugador1Input>
  }

  export type JugadorCreateWithoutPartidasComoJugador2Input = {
    identificacion: bigint | number
    nombre: string
    partidasGanadas?: number
    partidasPerdidas?: number
    partidasEmpatadas?: number
    marcador?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoCreateNestedManyWithoutJugadorInput
    partidasGanador?: PartidaCreateNestedManyWithoutGanadorInput
    partidasComoJugador1?: PartidaCreateNestedManyWithoutJugador1Input
  }

  export type JugadorUncheckedCreateWithoutPartidasComoJugador2Input = {
    id?: number
    identificacion: bigint | number
    nombre: string
    partidasGanadas?: number
    partidasPerdidas?: number
    partidasEmpatadas?: number
    marcador?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    movimientos?: MovimientoUncheckedCreateNestedManyWithoutJugadorInput
    partidasGanador?: PartidaUncheckedCreateNestedManyWithoutGanadorInput
    partidasComoJugador1?: PartidaUncheckedCreateNestedManyWithoutJugador1Input
  }

  export type JugadorCreateOrConnectWithoutPartidasComoJugador2Input = {
    where: JugadorWhereUniqueInput
    create: XOR<JugadorCreateWithoutPartidasComoJugador2Input, JugadorUncheckedCreateWithoutPartidasComoJugador2Input>
  }

  export type MovimientoUpsertWithWhereUniqueWithoutPartidaInput = {
    where: MovimientoWhereUniqueInput
    update: XOR<MovimientoUpdateWithoutPartidaInput, MovimientoUncheckedUpdateWithoutPartidaInput>
    create: XOR<MovimientoCreateWithoutPartidaInput, MovimientoUncheckedCreateWithoutPartidaInput>
  }

  export type MovimientoUpdateWithWhereUniqueWithoutPartidaInput = {
    where: MovimientoWhereUniqueInput
    data: XOR<MovimientoUpdateWithoutPartidaInput, MovimientoUncheckedUpdateWithoutPartidaInput>
  }

  export type MovimientoUpdateManyWithWhereWithoutPartidaInput = {
    where: MovimientoScalarWhereInput
    data: XOR<MovimientoUpdateManyMutationInput, MovimientoUncheckedUpdateManyWithoutPartidaInput>
  }

  export type JugadorUpsertWithoutPartidasGanadorInput = {
    update: XOR<JugadorUpdateWithoutPartidasGanadorInput, JugadorUncheckedUpdateWithoutPartidasGanadorInput>
    create: XOR<JugadorCreateWithoutPartidasGanadorInput, JugadorUncheckedCreateWithoutPartidasGanadorInput>
    where?: JugadorWhereInput
  }

  export type JugadorUpdateToOneWithWhereWithoutPartidasGanadorInput = {
    where?: JugadorWhereInput
    data: XOR<JugadorUpdateWithoutPartidasGanadorInput, JugadorUncheckedUpdateWithoutPartidasGanadorInput>
  }

  export type JugadorUpdateWithoutPartidasGanadorInput = {
    identificacion?: BigIntFieldUpdateOperationsInput | bigint | number
    nombre?: StringFieldUpdateOperationsInput | string
    partidasGanadas?: IntFieldUpdateOperationsInput | number
    partidasPerdidas?: IntFieldUpdateOperationsInput | number
    partidasEmpatadas?: IntFieldUpdateOperationsInput | number
    marcador?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUpdateManyWithoutJugadorNestedInput
    partidasComoJugador1?: PartidaUpdateManyWithoutJugador1NestedInput
    partidasComoJugador2?: PartidaUpdateManyWithoutJugador2NestedInput
  }

  export type JugadorUncheckedUpdateWithoutPartidasGanadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    identificacion?: BigIntFieldUpdateOperationsInput | bigint | number
    nombre?: StringFieldUpdateOperationsInput | string
    partidasGanadas?: IntFieldUpdateOperationsInput | number
    partidasPerdidas?: IntFieldUpdateOperationsInput | number
    partidasEmpatadas?: IntFieldUpdateOperationsInput | number
    marcador?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUncheckedUpdateManyWithoutJugadorNestedInput
    partidasComoJugador1?: PartidaUncheckedUpdateManyWithoutJugador1NestedInput
    partidasComoJugador2?: PartidaUncheckedUpdateManyWithoutJugador2NestedInput
  }

  export type JugadorUpsertWithoutPartidasComoJugador1Input = {
    update: XOR<JugadorUpdateWithoutPartidasComoJugador1Input, JugadorUncheckedUpdateWithoutPartidasComoJugador1Input>
    create: XOR<JugadorCreateWithoutPartidasComoJugador1Input, JugadorUncheckedCreateWithoutPartidasComoJugador1Input>
    where?: JugadorWhereInput
  }

  export type JugadorUpdateToOneWithWhereWithoutPartidasComoJugador1Input = {
    where?: JugadorWhereInput
    data: XOR<JugadorUpdateWithoutPartidasComoJugador1Input, JugadorUncheckedUpdateWithoutPartidasComoJugador1Input>
  }

  export type JugadorUpdateWithoutPartidasComoJugador1Input = {
    identificacion?: BigIntFieldUpdateOperationsInput | bigint | number
    nombre?: StringFieldUpdateOperationsInput | string
    partidasGanadas?: IntFieldUpdateOperationsInput | number
    partidasPerdidas?: IntFieldUpdateOperationsInput | number
    partidasEmpatadas?: IntFieldUpdateOperationsInput | number
    marcador?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUpdateManyWithoutJugadorNestedInput
    partidasGanador?: PartidaUpdateManyWithoutGanadorNestedInput
    partidasComoJugador2?: PartidaUpdateManyWithoutJugador2NestedInput
  }

  export type JugadorUncheckedUpdateWithoutPartidasComoJugador1Input = {
    id?: IntFieldUpdateOperationsInput | number
    identificacion?: BigIntFieldUpdateOperationsInput | bigint | number
    nombre?: StringFieldUpdateOperationsInput | string
    partidasGanadas?: IntFieldUpdateOperationsInput | number
    partidasPerdidas?: IntFieldUpdateOperationsInput | number
    partidasEmpatadas?: IntFieldUpdateOperationsInput | number
    marcador?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUncheckedUpdateManyWithoutJugadorNestedInput
    partidasGanador?: PartidaUncheckedUpdateManyWithoutGanadorNestedInput
    partidasComoJugador2?: PartidaUncheckedUpdateManyWithoutJugador2NestedInput
  }

  export type JugadorUpsertWithoutPartidasComoJugador2Input = {
    update: XOR<JugadorUpdateWithoutPartidasComoJugador2Input, JugadorUncheckedUpdateWithoutPartidasComoJugador2Input>
    create: XOR<JugadorCreateWithoutPartidasComoJugador2Input, JugadorUncheckedCreateWithoutPartidasComoJugador2Input>
    where?: JugadorWhereInput
  }

  export type JugadorUpdateToOneWithWhereWithoutPartidasComoJugador2Input = {
    where?: JugadorWhereInput
    data: XOR<JugadorUpdateWithoutPartidasComoJugador2Input, JugadorUncheckedUpdateWithoutPartidasComoJugador2Input>
  }

  export type JugadorUpdateWithoutPartidasComoJugador2Input = {
    identificacion?: BigIntFieldUpdateOperationsInput | bigint | number
    nombre?: StringFieldUpdateOperationsInput | string
    partidasGanadas?: IntFieldUpdateOperationsInput | number
    partidasPerdidas?: IntFieldUpdateOperationsInput | number
    partidasEmpatadas?: IntFieldUpdateOperationsInput | number
    marcador?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUpdateManyWithoutJugadorNestedInput
    partidasGanador?: PartidaUpdateManyWithoutGanadorNestedInput
    partidasComoJugador1?: PartidaUpdateManyWithoutJugador1NestedInput
  }

  export type JugadorUncheckedUpdateWithoutPartidasComoJugador2Input = {
    id?: IntFieldUpdateOperationsInput | number
    identificacion?: BigIntFieldUpdateOperationsInput | bigint | number
    nombre?: StringFieldUpdateOperationsInput | string
    partidasGanadas?: IntFieldUpdateOperationsInput | number
    partidasPerdidas?: IntFieldUpdateOperationsInput | number
    partidasEmpatadas?: IntFieldUpdateOperationsInput | number
    marcador?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUncheckedUpdateManyWithoutJugadorNestedInput
    partidasGanador?: PartidaUncheckedUpdateManyWithoutGanadorNestedInput
    partidasComoJugador1?: PartidaUncheckedUpdateManyWithoutJugador1NestedInput
  }

  export type JugadorCreateWithoutMovimientosInput = {
    identificacion: bigint | number
    nombre: string
    partidasGanadas?: number
    partidasPerdidas?: number
    partidasEmpatadas?: number
    marcador?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    partidasGanador?: PartidaCreateNestedManyWithoutGanadorInput
    partidasComoJugador1?: PartidaCreateNestedManyWithoutJugador1Input
    partidasComoJugador2?: PartidaCreateNestedManyWithoutJugador2Input
  }

  export type JugadorUncheckedCreateWithoutMovimientosInput = {
    id?: number
    identificacion: bigint | number
    nombre: string
    partidasGanadas?: number
    partidasPerdidas?: number
    partidasEmpatadas?: number
    marcador?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    partidasGanador?: PartidaUncheckedCreateNestedManyWithoutGanadorInput
    partidasComoJugador1?: PartidaUncheckedCreateNestedManyWithoutJugador1Input
    partidasComoJugador2?: PartidaUncheckedCreateNestedManyWithoutJugador2Input
  }

  export type JugadorCreateOrConnectWithoutMovimientosInput = {
    where: JugadorWhereUniqueInput
    create: XOR<JugadorCreateWithoutMovimientosInput, JugadorUncheckedCreateWithoutMovimientosInput>
  }

  export type PartidaCreateWithoutMovimientosInput = {
    estado?: string
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    ganador?: JugadorCreateNestedOneWithoutPartidasGanadorInput
    jugador1: JugadorCreateNestedOneWithoutPartidasComoJugador1Input
    jugador2: JugadorCreateNestedOneWithoutPartidasComoJugador2Input
  }

  export type PartidaUncheckedCreateWithoutMovimientosInput = {
    id?: number
    jugador1Id: number
    jugador2Id: number
    estado?: string
    ganadorId?: number | null
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type PartidaCreateOrConnectWithoutMovimientosInput = {
    where: PartidaWhereUniqueInput
    create: XOR<PartidaCreateWithoutMovimientosInput, PartidaUncheckedCreateWithoutMovimientosInput>
  }

  export type JugadorUpsertWithoutMovimientosInput = {
    update: XOR<JugadorUpdateWithoutMovimientosInput, JugadorUncheckedUpdateWithoutMovimientosInput>
    create: XOR<JugadorCreateWithoutMovimientosInput, JugadorUncheckedCreateWithoutMovimientosInput>
    where?: JugadorWhereInput
  }

  export type JugadorUpdateToOneWithWhereWithoutMovimientosInput = {
    where?: JugadorWhereInput
    data: XOR<JugadorUpdateWithoutMovimientosInput, JugadorUncheckedUpdateWithoutMovimientosInput>
  }

  export type JugadorUpdateWithoutMovimientosInput = {
    identificacion?: BigIntFieldUpdateOperationsInput | bigint | number
    nombre?: StringFieldUpdateOperationsInput | string
    partidasGanadas?: IntFieldUpdateOperationsInput | number
    partidasPerdidas?: IntFieldUpdateOperationsInput | number
    partidasEmpatadas?: IntFieldUpdateOperationsInput | number
    marcador?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    partidasGanador?: PartidaUpdateManyWithoutGanadorNestedInput
    partidasComoJugador1?: PartidaUpdateManyWithoutJugador1NestedInput
    partidasComoJugador2?: PartidaUpdateManyWithoutJugador2NestedInput
  }

  export type JugadorUncheckedUpdateWithoutMovimientosInput = {
    id?: IntFieldUpdateOperationsInput | number
    identificacion?: BigIntFieldUpdateOperationsInput | bigint | number
    nombre?: StringFieldUpdateOperationsInput | string
    partidasGanadas?: IntFieldUpdateOperationsInput | number
    partidasPerdidas?: IntFieldUpdateOperationsInput | number
    partidasEmpatadas?: IntFieldUpdateOperationsInput | number
    marcador?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    partidasGanador?: PartidaUncheckedUpdateManyWithoutGanadorNestedInput
    partidasComoJugador1?: PartidaUncheckedUpdateManyWithoutJugador1NestedInput
    partidasComoJugador2?: PartidaUncheckedUpdateManyWithoutJugador2NestedInput
  }

  export type PartidaUpsertWithoutMovimientosInput = {
    update: XOR<PartidaUpdateWithoutMovimientosInput, PartidaUncheckedUpdateWithoutMovimientosInput>
    create: XOR<PartidaCreateWithoutMovimientosInput, PartidaUncheckedCreateWithoutMovimientosInput>
    where?: PartidaWhereInput
  }

  export type PartidaUpdateToOneWithWhereWithoutMovimientosInput = {
    where?: PartidaWhereInput
    data: XOR<PartidaUpdateWithoutMovimientosInput, PartidaUncheckedUpdateWithoutMovimientosInput>
  }

  export type PartidaUpdateWithoutMovimientosInput = {
    estado?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    ganador?: JugadorUpdateOneWithoutPartidasGanadorNestedInput
    jugador1?: JugadorUpdateOneRequiredWithoutPartidasComoJugador1NestedInput
    jugador2?: JugadorUpdateOneRequiredWithoutPartidasComoJugador2NestedInput
  }

  export type PartidaUncheckedUpdateWithoutMovimientosInput = {
    id?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    estadoTablero: string
    historialMovimientos?: string | null
    resultado?: string | null
    fechaInicio?: Date | string | null
    Jugador_backup_Partida_backup_idJugador2ToJugador_backup: Jugador_backupCreateNestedOneWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput
  }

  export type Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    idPartida?: number
    idJugador2: number
    estadoTablero: string
    historialMovimientos?: string | null
    resultado?: string | null
    fechaInicio?: Date | string | null
  }

  export type Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    where: Partida_backupWhereUniqueInput
    create: XOR<Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput, Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput>
  }

  export type Partida_backupCreateManyJugador_backup_Partida_backup_idJugador1ToJugador_backupInputEnvelope = {
    data: Partida_backupCreateManyJugador_backup_Partida_backup_idJugador1ToJugador_backupInput | Partida_backupCreateManyJugador_backup_Partida_backup_idJugador1ToJugador_backupInput[]
  }

  export type Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    estadoTablero: string
    historialMovimientos?: string | null
    resultado?: string | null
    fechaInicio?: Date | string | null
    Jugador_backup_Partida_backup_idJugador1ToJugador_backup: Jugador_backupCreateNestedOneWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput
  }

  export type Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    idPartida?: number
    idJugador1: number
    estadoTablero: string
    historialMovimientos?: string | null
    resultado?: string | null
    fechaInicio?: Date | string | null
  }

  export type Partida_backupCreateOrConnectWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    where: Partida_backupWhereUniqueInput
    create: XOR<Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput, Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput>
  }

  export type Partida_backupCreateManyJugador_backup_Partida_backup_idJugador2ToJugador_backupInputEnvelope = {
    data: Partida_backupCreateManyJugador_backup_Partida_backup_idJugador2ToJugador_backupInput | Partida_backupCreateManyJugador_backup_Partida_backup_idJugador2ToJugador_backupInput[]
  }

  export type Partida_backupUpsertWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    where: Partida_backupWhereUniqueInput
    update: XOR<Partida_backupUpdateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput, Partida_backupUncheckedUpdateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput>
    create: XOR<Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput, Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput>
  }

  export type Partida_backupUpdateWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    where: Partida_backupWhereUniqueInput
    data: XOR<Partida_backupUpdateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput, Partida_backupUncheckedUpdateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput>
  }

  export type Partida_backupUpdateManyWithWhereWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    where: Partida_backupScalarWhereInput
    data: XOR<Partida_backupUpdateManyMutationInput, Partida_backupUncheckedUpdateManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput>
  }

  export type Partida_backupScalarWhereInput = {
    AND?: Partida_backupScalarWhereInput | Partida_backupScalarWhereInput[]
    OR?: Partida_backupScalarWhereInput[]
    NOT?: Partida_backupScalarWhereInput | Partida_backupScalarWhereInput[]
    idPartida?: IntFilter<"Partida_backup"> | number
    idJugador1?: IntFilter<"Partida_backup"> | number
    idJugador2?: IntFilter<"Partida_backup"> | number
    estadoTablero?: StringFilter<"Partida_backup"> | string
    historialMovimientos?: StringNullableFilter<"Partida_backup"> | string | null
    resultado?: StringNullableFilter<"Partida_backup"> | string | null
    fechaInicio?: DateTimeNullableFilter<"Partida_backup"> | Date | string | null
  }

  export type Partida_backupUpsertWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    where: Partida_backupWhereUniqueInput
    update: XOR<Partida_backupUpdateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput, Partida_backupUncheckedUpdateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput>
    create: XOR<Partida_backupCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput, Partida_backupUncheckedCreateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput>
  }

  export type Partida_backupUpdateWithWhereUniqueWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    where: Partida_backupWhereUniqueInput
    data: XOR<Partida_backupUpdateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput, Partida_backupUncheckedUpdateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput>
  }

  export type Partida_backupUpdateManyWithWhereWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    where: Partida_backupScalarWhereInput
    data: XOR<Partida_backupUpdateManyMutationInput, Partida_backupUncheckedUpdateManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput>
  }

  export type Jugador_backupCreateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    idJugador: number
    nombre: string
    marcador?: number
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: Partida_backupCreateNestedManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput
  }

  export type Jugador_backupUncheckedCreateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    idJugador: number
    nombre: string
    marcador?: number
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: Partida_backupUncheckedCreateNestedManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput
  }

  export type Jugador_backupCreateOrConnectWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    where: Jugador_backupWhereUniqueInput
    create: XOR<Jugador_backupCreateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput, Jugador_backupUncheckedCreateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput>
  }

  export type Jugador_backupCreateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    idJugador: number
    nombre: string
    marcador?: number
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: Partida_backupCreateNestedManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput
  }

  export type Jugador_backupUncheckedCreateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    idJugador: number
    nombre: string
    marcador?: number
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: Partida_backupUncheckedCreateNestedManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput
  }

  export type Jugador_backupCreateOrConnectWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    where: Jugador_backupWhereUniqueInput
    create: XOR<Jugador_backupCreateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput, Jugador_backupUncheckedCreateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput>
  }

  export type Jugador_backupUpsertWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    update: XOR<Jugador_backupUpdateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput, Jugador_backupUncheckedUpdateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput>
    create: XOR<Jugador_backupCreateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput, Jugador_backupUncheckedCreateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput>
    where?: Jugador_backupWhereInput
  }

  export type Jugador_backupUpdateToOneWithWhereWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    where?: Jugador_backupWhereInput
    data: XOR<Jugador_backupUpdateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput, Jugador_backupUncheckedUpdateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput>
  }

  export type Jugador_backupUpdateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    idJugador?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    marcador?: IntFieldUpdateOperationsInput | number
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: Partida_backupUpdateManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupNestedInput
  }

  export type Jugador_backupUncheckedUpdateWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    idJugador?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    marcador?: IntFieldUpdateOperationsInput | number
    Partida_backup_Partida_backup_idJugador2ToJugador_backup?: Partida_backupUncheckedUpdateManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupNestedInput
  }

  export type Jugador_backupUpsertWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    update: XOR<Jugador_backupUpdateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput, Jugador_backupUncheckedUpdateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput>
    create: XOR<Jugador_backupCreateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput, Jugador_backupUncheckedCreateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput>
    where?: Jugador_backupWhereInput
  }

  export type Jugador_backupUpdateToOneWithWhereWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    where?: Jugador_backupWhereInput
    data: XOR<Jugador_backupUpdateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput, Jugador_backupUncheckedUpdateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput>
  }

  export type Jugador_backupUpdateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    idJugador?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    marcador?: IntFieldUpdateOperationsInput | number
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: Partida_backupUpdateManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupNestedInput
  }

  export type Jugador_backupUncheckedUpdateWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    idJugador?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    marcador?: IntFieldUpdateOperationsInput | number
    Partida_backup_Partida_backup_idJugador1ToJugador_backup?: Partida_backupUncheckedUpdateManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupNestedInput
  }

  export type MovimientoCreateManyJugadorInput = {
    partidaId: number
    columnaLetra: string
    filaPosicion: number
    numeroMovimiento: number
    fechaCreacion?: Date | string
  }

  export type PartidaCreateManyGanadorInput = {
    jugador1Id: number
    jugador2Id: number
    estado?: string
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type PartidaCreateManyJugador1Input = {
    jugador2Id: number
    estado?: string
    ganadorId?: number | null
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type PartidaCreateManyJugador2Input = {
    jugador1Id: number
    estado?: string
    ganadorId?: number | null
    resultado?: string | null
    tablero?: string
    turnoActual?: number
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type MovimientoUpdateWithoutJugadorInput = {
    columnaLetra?: StringFieldUpdateOperationsInput | string
    filaPosicion?: IntFieldUpdateOperationsInput | number
    numeroMovimiento?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    partida?: PartidaUpdateOneRequiredWithoutMovimientosNestedInput
  }

  export type MovimientoUncheckedUpdateWithoutJugadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    partidaId?: IntFieldUpdateOperationsInput | number
    columnaLetra?: StringFieldUpdateOperationsInput | string
    filaPosicion?: IntFieldUpdateOperationsInput | number
    numeroMovimiento?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovimientoUncheckedUpdateManyWithoutJugadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    partidaId?: IntFieldUpdateOperationsInput | number
    columnaLetra?: StringFieldUpdateOperationsInput | string
    filaPosicion?: IntFieldUpdateOperationsInput | number
    numeroMovimiento?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartidaUpdateWithoutGanadorInput = {
    estado?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUpdateManyWithoutPartidaNestedInput
    jugador1?: JugadorUpdateOneRequiredWithoutPartidasComoJugador1NestedInput
    jugador2?: JugadorUpdateOneRequiredWithoutPartidasComoJugador2NestedInput
  }

  export type PartidaUncheckedUpdateWithoutGanadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUncheckedUpdateManyWithoutPartidaNestedInput
  }

  export type PartidaUncheckedUpdateManyWithoutGanadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartidaUpdateWithoutJugador1Input = {
    estado?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUpdateManyWithoutPartidaNestedInput
    ganador?: JugadorUpdateOneWithoutPartidasGanadorNestedInput
    jugador2?: JugadorUpdateOneRequiredWithoutPartidasComoJugador2NestedInput
  }

  export type PartidaUncheckedUpdateWithoutJugador1Input = {
    id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUncheckedUpdateManyWithoutPartidaNestedInput
  }

  export type PartidaUncheckedUpdateManyWithoutJugador1Input = {
    id?: IntFieldUpdateOperationsInput | number
    jugador2Id?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartidaUpdateWithoutJugador2Input = {
    estado?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUpdateManyWithoutPartidaNestedInput
    ganador?: JugadorUpdateOneWithoutPartidasGanadorNestedInput
    jugador1?: JugadorUpdateOneRequiredWithoutPartidasComoJugador1NestedInput
  }

  export type PartidaUncheckedUpdateWithoutJugador2Input = {
    id?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    movimientos?: MovimientoUncheckedUpdateManyWithoutPartidaNestedInput
  }

  export type PartidaUncheckedUpdateManyWithoutJugador2Input = {
    id?: IntFieldUpdateOperationsInput | number
    jugador1Id?: IntFieldUpdateOperationsInput | number
    estado?: StringFieldUpdateOperationsInput | string
    ganadorId?: NullableIntFieldUpdateOperationsInput | number | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    tablero?: StringFieldUpdateOperationsInput | string
    turnoActual?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovimientoCreateManyPartidaInput = {
    jugadorId: number
    columnaLetra: string
    filaPosicion: number
    numeroMovimiento: number
    fechaCreacion?: Date | string
  }

  export type MovimientoUpdateWithoutPartidaInput = {
    columnaLetra?: StringFieldUpdateOperationsInput | string
    filaPosicion?: IntFieldUpdateOperationsInput | number
    numeroMovimiento?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    jugador?: JugadorUpdateOneRequiredWithoutMovimientosNestedInput
  }

  export type MovimientoUncheckedUpdateWithoutPartidaInput = {
    id?: IntFieldUpdateOperationsInput | number
    jugadorId?: IntFieldUpdateOperationsInput | number
    columnaLetra?: StringFieldUpdateOperationsInput | string
    filaPosicion?: IntFieldUpdateOperationsInput | number
    numeroMovimiento?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovimientoUncheckedUpdateManyWithoutPartidaInput = {
    id?: IntFieldUpdateOperationsInput | number
    jugadorId?: IntFieldUpdateOperationsInput | number
    columnaLetra?: StringFieldUpdateOperationsInput | string
    filaPosicion?: IntFieldUpdateOperationsInput | number
    numeroMovimiento?: IntFieldUpdateOperationsInput | number
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Partida_backupCreateManyJugador_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    idJugador2: number
    estadoTablero: string
    historialMovimientos?: string | null
    resultado?: string | null
    fechaInicio?: Date | string | null
  }

  export type Partida_backupCreateManyJugador_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    idJugador1: number
    estadoTablero: string
    historialMovimientos?: string | null
    resultado?: string | null
    fechaInicio?: Date | string | null
  }

  export type Partida_backupUpdateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    estadoTablero?: StringFieldUpdateOperationsInput | string
    historialMovimientos?: NullableStringFieldUpdateOperationsInput | string | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Jugador_backup_Partida_backup_idJugador2ToJugador_backup?: Jugador_backupUpdateOneRequiredWithoutPartida_backup_Partida_backup_idJugador2ToJugador_backupNestedInput
  }

  export type Partida_backupUncheckedUpdateWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    idPartida?: IntFieldUpdateOperationsInput | number
    idJugador2?: IntFieldUpdateOperationsInput | number
    estadoTablero?: StringFieldUpdateOperationsInput | string
    historialMovimientos?: NullableStringFieldUpdateOperationsInput | string | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Partida_backupUncheckedUpdateManyWithoutJugador_backup_Partida_backup_idJugador1ToJugador_backupInput = {
    idPartida?: IntFieldUpdateOperationsInput | number
    idJugador2?: IntFieldUpdateOperationsInput | number
    estadoTablero?: StringFieldUpdateOperationsInput | string
    historialMovimientos?: NullableStringFieldUpdateOperationsInput | string | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Partida_backupUpdateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    estadoTablero?: StringFieldUpdateOperationsInput | string
    historialMovimientos?: NullableStringFieldUpdateOperationsInput | string | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Jugador_backup_Partida_backup_idJugador1ToJugador_backup?: Jugador_backupUpdateOneRequiredWithoutPartida_backup_Partida_backup_idJugador1ToJugador_backupNestedInput
  }

  export type Partida_backupUncheckedUpdateWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    idPartida?: IntFieldUpdateOperationsInput | number
    idJugador1?: IntFieldUpdateOperationsInput | number
    estadoTablero?: StringFieldUpdateOperationsInput | string
    historialMovimientos?: NullableStringFieldUpdateOperationsInput | string | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type Partida_backupUncheckedUpdateManyWithoutJugador_backup_Partida_backup_idJugador2ToJugador_backupInput = {
    idPartida?: IntFieldUpdateOperationsInput | number
    idJugador1?: IntFieldUpdateOperationsInput | number
    estadoTablero?: StringFieldUpdateOperationsInput | string
    historialMovimientos?: NullableStringFieldUpdateOperationsInput | string | null
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use JugadorCountOutputTypeDefaultArgs instead
     */
    export type JugadorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JugadorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PartidaCountOutputTypeDefaultArgs instead
     */
    export type PartidaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PartidaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Jugador_backupCountOutputTypeDefaultArgs instead
     */
    export type Jugador_backupCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Jugador_backupCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JugadorDefaultArgs instead
     */
    export type JugadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JugadorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PartidaDefaultArgs instead
     */
    export type PartidaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PartidaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MovimientoDefaultArgs instead
     */
    export type MovimientoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovimientoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Jugador_backupDefaultArgs instead
     */
    export type Jugador_backupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Jugador_backupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Partida_backupDefaultArgs instead
     */
    export type Partida_backupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Partida_backupDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}